// Code generated by protoc-gen-go.
// source: scheduler.proto
// DO NOT EDIT!

package qpov

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LoginRequest struct {
	Cookie string `protobuf:"bytes,1,opt,name=cookie" json:"cookie,omitempty"`
	Jwt    string `protobuf:"bytes,2,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type LoginReply struct {
	Cookie string `protobuf:"bytes,1,opt,name=cookie" json:"cookie,omitempty"`
}

func (m *LoginReply) Reset()                    { *m = LoginReply{} }
func (m *LoginReply) String() string            { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()               {}
func (*LoginReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type LogoutRequest struct {
	Cookie string `protobuf:"bytes,1,opt,name=cookie" json:"cookie,omitempty"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type LogoutReply struct {
}

func (m *LogoutReply) Reset()                    { *m = LogoutReply{} }
func (m *LogoutReply) String() string            { return proto.CompactTextString(m) }
func (*LogoutReply) ProtoMessage()               {}
func (*LogoutReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type CheckCookieRequest struct {
	Cookie string `protobuf:"bytes,1,opt,name=cookie" json:"cookie,omitempty"`
}

func (m *CheckCookieRequest) Reset()                    { *m = CheckCookieRequest{} }
func (m *CheckCookieRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckCookieRequest) ProtoMessage()               {}
func (*CheckCookieRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

type CheckCookieReply struct {
}

func (m *CheckCookieReply) Reset()                    { *m = CheckCookieReply{} }
func (m *CheckCookieReply) String() string            { return proto.CompactTextString(m) }
func (*CheckCookieReply) ProtoMessage()               {}
func (*CheckCookieReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

type CertificateRequest struct {
}

func (m *CertificateRequest) Reset()                    { *m = CertificateRequest{} }
func (m *CertificateRequest) String() string            { return proto.CompactTextString(m) }
func (*CertificateRequest) ProtoMessage()               {}
func (*CertificateRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

type CertificateReply struct {
	Pem []byte `protobuf:"bytes,1,opt,name=pem,proto3" json:"pem,omitempty"`
}

func (m *CertificateReply) Reset()                    { *m = CertificateReply{} }
func (m *CertificateReply) String() string            { return proto.CompactTextString(m) }
func (*CertificateReply) ProtoMessage()               {}
func (*CertificateReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

type GetRequest struct {
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

type GetReply struct {
	LeaseId         string `protobuf:"bytes,1,opt,name=lease_id,json=leaseId" json:"lease_id,omitempty"`
	OrderDefinition string `protobuf:"bytes,2,opt,name=order_definition,json=orderDefinition" json:"order_definition,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

type RenewRequest struct {
	LeaseId   string `protobuf:"bytes,1,opt,name=lease_id,json=leaseId" json:"lease_id,omitempty"`
	ExtendSec int32  `protobuf:"varint,2,opt,name=extend_sec,json=extendSec" json:"extend_sec,omitempty"`
}

func (m *RenewRequest) Reset()                    { *m = RenewRequest{} }
func (m *RenewRequest) String() string            { return proto.CompactTextString(m) }
func (*RenewRequest) ProtoMessage()               {}
func (*RenewRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

type RenewReply struct {
	NewTimeoutSec int64 `protobuf:"varint,1,opt,name=new_timeout_sec,json=newTimeoutSec" json:"new_timeout_sec,omitempty"`
}

func (m *RenewReply) Reset()                    { *m = RenewReply{} }
func (m *RenewReply) String() string            { return proto.CompactTextString(m) }
func (*RenewReply) ProtoMessage()               {}
func (*RenewReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

type DoneRequest struct {
	LeaseId      string             `protobuf:"bytes,1,opt,name=lease_id,json=leaseId" json:"lease_id,omitempty"`
	Image        []byte             `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Stdout       []byte             `protobuf:"bytes,3,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr       []byte             `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	JsonMetadata string             `protobuf:"bytes,5,opt,name=json_metadata,json=jsonMetadata" json:"json_metadata,omitempty"`
	Metadata     *RenderingMetadata `protobuf:"bytes,6,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *DoneRequest) Reset()                    { *m = DoneRequest{} }
func (m *DoneRequest) String() string            { return proto.CompactTextString(m) }
func (*DoneRequest) ProtoMessage()               {}
func (*DoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *DoneRequest) GetMetadata() *RenderingMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type DoneReply struct {
}

func (m *DoneReply) Reset()                    { *m = DoneReply{} }
func (m *DoneReply) String() string            { return proto.CompactTextString(m) }
func (*DoneReply) ProtoMessage()               {}
func (*DoneReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

type FailedRequest struct {
	LeaseId string `protobuf:"bytes,1,opt,name=lease_id,json=leaseId" json:"lease_id,omitempty"`
}

func (m *FailedRequest) Reset()                    { *m = FailedRequest{} }
func (m *FailedRequest) String() string            { return proto.CompactTextString(m) }
func (*FailedRequest) ProtoMessage()               {}
func (*FailedRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{14} }

type FailedReply struct {
}

func (m *FailedReply) Reset()                    { *m = FailedReply{} }
func (m *FailedReply) String() string            { return proto.CompactTextString(m) }
func (*FailedReply) ProtoMessage()               {}
func (*FailedReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{15} }

type AddRequest struct {
	OrderDefinition string `protobuf:"bytes,1,opt,name=order_definition,json=orderDefinition" json:"order_definition,omitempty"`
	// string destination = 2; // DEPRECATED: Directory to store the results as <file>.png and <file>.proto.
	BatchId string `protobuf:"bytes,3,opt,name=batch_id,json=batchId" json:"batch_id,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{16} }

type AddReply struct {
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
}

func (m *AddReply) Reset()                    { *m = AddReply{} }
func (m *AddReply) String() string            { return proto.CompactTextString(m) }
func (*AddReply) ProtoMessage()               {}
func (*AddReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{17} }

type Lease struct {
	OrderId   string             `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	LeaseId   string             `protobuf:"bytes,2,opt,name=lease_id,json=leaseId" json:"lease_id,omitempty"`
	Done      bool               `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
	UserId    int64              `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CreatedMs int64              `protobuf:"varint,5,opt,name=created_ms,json=createdMs" json:"created_ms,omitempty"`
	UpdatedMs int64              `protobuf:"varint,6,opt,name=updated_ms,json=updatedMs" json:"updated_ms,omitempty"`
	ExpiresMs int64              `protobuf:"varint,7,opt,name=expires_ms,json=expiresMs" json:"expires_ms,omitempty"`
	Order     *Order             `protobuf:"bytes,8,opt,name=order" json:"order,omitempty"`
	Metadata  *RenderingMetadata `protobuf:"bytes,9,opt,name=metadata" json:"metadata,omitempty"`
	Failed    bool               `protobuf:"varint,10,opt,name=failed" json:"failed,omitempty"`
	Address   string             `protobuf:"bytes,11,opt,name=address" json:"address,omitempty"`
	Hostname  string             `protobuf:"bytes,12,opt,name=hostname" json:"hostname,omitempty"`
}

func (m *Lease) Reset()                    { *m = Lease{} }
func (m *Lease) String() string            { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()               {}
func (*Lease) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{18} }

func (m *Lease) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *Lease) GetMetadata() *RenderingMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type LeaseRequest struct {
	LeaseId string `protobuf:"bytes,1,opt,name=lease_id,json=leaseId" json:"lease_id,omitempty"`
}

func (m *LeaseRequest) Reset()                    { *m = LeaseRequest{} }
func (m *LeaseRequest) String() string            { return proto.CompactTextString(m) }
func (*LeaseRequest) ProtoMessage()               {}
func (*LeaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{19} }

type LeaseReply struct {
	Lease *Lease `protobuf:"bytes,1,opt,name=lease" json:"lease,omitempty"`
}

func (m *LeaseReply) Reset()                    { *m = LeaseReply{} }
func (m *LeaseReply) String() string            { return proto.CompactTextString(m) }
func (*LeaseReply) ProtoMessage()               {}
func (*LeaseReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{20} }

func (m *LeaseReply) GetLease() *Lease {
	if m != nil {
		return m.Lease
	}
	return nil
}

type OrderRequest struct {
	OrderId []string `protobuf:"bytes,1,rep,name=order_id,json=orderId" json:"order_id,omitempty"`
}

func (m *OrderRequest) Reset()                    { *m = OrderRequest{} }
func (m *OrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()               {}
func (*OrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{21} }

type OrderReply struct {
	Order []*Order `protobuf:"bytes,1,rep,name=order" json:"order,omitempty"`
}

func (m *OrderReply) Reset()                    { *m = OrderReply{} }
func (m *OrderReply) String() string            { return proto.CompactTextString(m) }
func (*OrderReply) ProtoMessage()               {}
func (*OrderReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{22} }

func (m *OrderReply) GetOrder() []*Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type LeasesRequest struct {
	Done     bool `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
	Order    bool `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	Metadata bool `protobuf:"varint,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *LeasesRequest) Reset()                    { *m = LeasesRequest{} }
func (m *LeasesRequest) String() string            { return proto.CompactTextString(m) }
func (*LeasesRequest) ProtoMessage()               {}
func (*LeasesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{23} }

type LeasesReply struct {
	Lease *Lease `protobuf:"bytes,1,opt,name=lease" json:"lease,omitempty"`
}

func (m *LeasesReply) Reset()                    { *m = LeasesReply{} }
func (m *LeasesReply) String() string            { return proto.CompactTextString(m) }
func (*LeasesReply) ProtoMessage()               {}
func (*LeasesReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{24} }

func (m *LeasesReply) GetLease() *Lease {
	if m != nil {
		return m.Lease
	}
	return nil
}

type OrdersRequest struct {
	Done      bool `protobuf:"varint,1,opt,name=done" json:"done,omitempty"`
	Active    bool `protobuf:"varint,2,opt,name=active" json:"active,omitempty"`
	Unstarted bool `protobuf:"varint,3,opt,name=unstarted" json:"unstarted,omitempty"`
}

func (m *OrdersRequest) Reset()                    { *m = OrdersRequest{} }
func (m *OrdersRequest) String() string            { return proto.CompactTextString(m) }
func (*OrdersRequest) ProtoMessage()               {}
func (*OrdersRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{25} }

type OrderStat struct {
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	Done    bool   `protobuf:"varint,2,opt,name=done" json:"done,omitempty"`
	Active  bool   `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
}

func (m *OrderStat) Reset()                    { *m = OrderStat{} }
func (m *OrderStat) String() string            { return proto.CompactTextString(m) }
func (*OrderStat) ProtoMessage()               {}
func (*OrderStat) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{26} }

type OrdersReply struct {
	Order *OrderStat `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
}

func (m *OrdersReply) Reset()                    { *m = OrdersReply{} }
func (m *OrdersReply) String() string            { return proto.CompactTextString(m) }
func (*OrdersReply) ProtoMessage()               {}
func (*OrdersReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{27} }

func (m *OrdersReply) GetOrder() *OrderStat {
	if m != nil {
		return m.Order
	}
	return nil
}

type SchedulingStats struct {
	Orders       int64 `protobuf:"varint,1,opt,name=orders" json:"orders,omitempty"`
	ActiveOrders int64 `protobuf:"varint,2,opt,name=active_orders,json=activeOrders" json:"active_orders,omitempty"`
	DoneOrders   int64 `protobuf:"varint,3,opt,name=done_orders,json=doneOrders" json:"done_orders,omitempty"`
	Leases       int64 `protobuf:"varint,4,opt,name=leases" json:"leases,omitempty"`
	ActiveLeases int64 `protobuf:"varint,5,opt,name=active_leases,json=activeLeases" json:"active_leases,omitempty"`
	DoneLeases   int64 `protobuf:"varint,6,opt,name=done_leases,json=doneLeases" json:"done_leases,omitempty"`
}

func (m *SchedulingStats) Reset()                    { *m = SchedulingStats{} }
func (m *SchedulingStats) String() string            { return proto.CompactTextString(m) }
func (*SchedulingStats) ProtoMessage()               {}
func (*SchedulingStats) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{28} }

type StatsRequest struct {
	SchedulingStats bool `protobuf:"varint,1,opt,name=scheduling_stats,json=schedulingStats" json:"scheduling_stats,omitempty"`
}

func (m *StatsRequest) Reset()                    { *m = StatsRequest{} }
func (m *StatsRequest) String() string            { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()               {}
func (*StatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{29} }

// Global stats.
type StatsReply struct {
	SchedulingStats *SchedulingStats `protobuf:"bytes,1,opt,name=scheduling_stats,json=schedulingStats" json:"scheduling_stats,omitempty"`
}

func (m *StatsReply) Reset()                    { *m = StatsReply{} }
func (m *StatsReply) String() string            { return proto.CompactTextString(m) }
func (*StatsReply) ProtoMessage()               {}
func (*StatsReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{30} }

func (m *StatsReply) GetSchedulingStats() *SchedulingStats {
	if m != nil {
		return m.SchedulingStats
	}
	return nil
}

type ResultRequest struct {
	LeaseId string `protobuf:"bytes,1,opt,name=lease_id,json=leaseId" json:"lease_id,omitempty"`
	Data    bool   `protobuf:"varint,2,opt,name=data" json:"data,omitempty"`
}

func (m *ResultRequest) Reset()                    { *m = ResultRequest{} }
func (m *ResultRequest) String() string            { return proto.CompactTextString(m) }
func (*ResultRequest) ProtoMessage()               {}
func (*ResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{31} }

type ResultReply struct {
	ContentType string `protobuf:"bytes,1,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	Data        []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ResultReply) Reset()                    { *m = ResultReply{} }
func (m *ResultReply) String() string            { return proto.CompactTextString(m) }
func (*ResultReply) ProtoMessage()               {}
func (*ResultReply) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{32} }

func init() {
	proto.RegisterType((*LoginRequest)(nil), "qpov.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "qpov.LoginReply")
	proto.RegisterType((*LogoutRequest)(nil), "qpov.LogoutRequest")
	proto.RegisterType((*LogoutReply)(nil), "qpov.LogoutReply")
	proto.RegisterType((*CheckCookieRequest)(nil), "qpov.CheckCookieRequest")
	proto.RegisterType((*CheckCookieReply)(nil), "qpov.CheckCookieReply")
	proto.RegisterType((*CertificateRequest)(nil), "qpov.CertificateRequest")
	proto.RegisterType((*CertificateReply)(nil), "qpov.CertificateReply")
	proto.RegisterType((*GetRequest)(nil), "qpov.GetRequest")
	proto.RegisterType((*GetReply)(nil), "qpov.GetReply")
	proto.RegisterType((*RenewRequest)(nil), "qpov.RenewRequest")
	proto.RegisterType((*RenewReply)(nil), "qpov.RenewReply")
	proto.RegisterType((*DoneRequest)(nil), "qpov.DoneRequest")
	proto.RegisterType((*DoneReply)(nil), "qpov.DoneReply")
	proto.RegisterType((*FailedRequest)(nil), "qpov.FailedRequest")
	proto.RegisterType((*FailedReply)(nil), "qpov.FailedReply")
	proto.RegisterType((*AddRequest)(nil), "qpov.AddRequest")
	proto.RegisterType((*AddReply)(nil), "qpov.AddReply")
	proto.RegisterType((*Lease)(nil), "qpov.Lease")
	proto.RegisterType((*LeaseRequest)(nil), "qpov.LeaseRequest")
	proto.RegisterType((*LeaseReply)(nil), "qpov.LeaseReply")
	proto.RegisterType((*OrderRequest)(nil), "qpov.OrderRequest")
	proto.RegisterType((*OrderReply)(nil), "qpov.OrderReply")
	proto.RegisterType((*LeasesRequest)(nil), "qpov.LeasesRequest")
	proto.RegisterType((*LeasesReply)(nil), "qpov.LeasesReply")
	proto.RegisterType((*OrdersRequest)(nil), "qpov.OrdersRequest")
	proto.RegisterType((*OrderStat)(nil), "qpov.OrderStat")
	proto.RegisterType((*OrdersReply)(nil), "qpov.OrdersReply")
	proto.RegisterType((*SchedulingStats)(nil), "qpov.SchedulingStats")
	proto.RegisterType((*StatsRequest)(nil), "qpov.StatsRequest")
	proto.RegisterType((*StatsReply)(nil), "qpov.StatsReply")
	proto.RegisterType((*ResultRequest)(nil), "qpov.ResultRequest")
	proto.RegisterType((*ResultReply)(nil), "qpov.ResultReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for CookieMonster service

type CookieMonsterClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
	CheckCookie(ctx context.Context, in *CheckCookieRequest, opts ...grpc.CallOption) (*CheckCookieReply, error)
}

type cookieMonsterClient struct {
	cc *grpc.ClientConn
}

func NewCookieMonsterClient(cc *grpc.ClientConn) CookieMonsterClient {
	return &cookieMonsterClient{cc}
}

func (c *cookieMonsterClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := grpc.Invoke(ctx, "/qpov.CookieMonster/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookieMonsterClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := grpc.Invoke(ctx, "/qpov.CookieMonster/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookieMonsterClient) CheckCookie(ctx context.Context, in *CheckCookieRequest, opts ...grpc.CallOption) (*CheckCookieReply, error) {
	out := new(CheckCookieReply)
	err := grpc.Invoke(ctx, "/qpov.CookieMonster/CheckCookie", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CookieMonster service

type CookieMonsterServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	CheckCookie(context.Context, *CheckCookieRequest) (*CheckCookieReply, error)
}

func RegisterCookieMonsterServer(s *grpc.Server, srv CookieMonsterServer) {
	s.RegisterService(&_CookieMonster_serviceDesc, srv)
}

func _CookieMonster_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieMonsterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.CookieMonster/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieMonsterServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CookieMonster_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieMonsterServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.CookieMonster/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieMonsterServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CookieMonster_CheckCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCookieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieMonsterServer).CheckCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.CookieMonster/CheckCookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieMonsterServer).CheckCookie(ctx, req.(*CheckCookieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CookieMonster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qpov.CookieMonster",
	HandlerType: (*CookieMonsterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CookieMonster_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _CookieMonster_Logout_Handler,
		},
		{
			MethodName: "CheckCookie",
			Handler:    _CookieMonster_CheckCookie_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Scheduler service

type SchedulerClient interface {
	// Render client API.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewReply, error)
	Done(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneReply, error)
	Failed(ctx context.Context, in *FailedRequest, opts ...grpc.CallOption) (*FailedReply, error)
	// Order handling API. Restricted.
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	// Stats API. Restricted.
	Lease(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*LeaseReply, error)
	Leases(ctx context.Context, in *LeasesRequest, opts ...grpc.CallOption) (Scheduler_LeasesClient, error)
	Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderReply, error)
	Orders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (Scheduler_OrdersClient, error)
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error)
	// WebUI magic.
	// rpc UserStats (UserStatsRequest) returns (UserStatsReply) {}
	Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (Scheduler_ResultClient, error)
	Certificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateReply, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/qpov.Scheduler/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewReply, error) {
	out := new(RenewReply)
	err := grpc.Invoke(ctx, "/qpov.Scheduler/Renew", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Done(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneReply, error) {
	out := new(DoneReply)
	err := grpc.Invoke(ctx, "/qpov.Scheduler/Done", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Failed(ctx context.Context, in *FailedRequest, opts ...grpc.CallOption) (*FailedReply, error) {
	out := new(FailedReply)
	err := grpc.Invoke(ctx, "/qpov.Scheduler/Failed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := grpc.Invoke(ctx, "/qpov.Scheduler/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Lease(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*LeaseReply, error) {
	out := new(LeaseReply)
	err := grpc.Invoke(ctx, "/qpov.Scheduler/Lease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Leases(ctx context.Context, in *LeasesRequest, opts ...grpc.CallOption) (Scheduler_LeasesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Scheduler_serviceDesc.Streams[0], c.cc, "/qpov.Scheduler/Leases", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerLeasesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_LeasesClient interface {
	Recv() (*LeasesReply, error)
	grpc.ClientStream
}

type schedulerLeasesClient struct {
	grpc.ClientStream
}

func (x *schedulerLeasesClient) Recv() (*LeasesReply, error) {
	m := new(LeasesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderReply, error) {
	out := new(OrderReply)
	err := grpc.Invoke(ctx, "/qpov.Scheduler/Order", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Orders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (Scheduler_OrdersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Scheduler_serviceDesc.Streams[1], c.cc, "/qpov.Scheduler/Orders", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_OrdersClient interface {
	Recv() (*OrdersReply, error)
	grpc.ClientStream
}

type schedulerOrdersClient struct {
	grpc.ClientStream
}

func (x *schedulerOrdersClient) Recv() (*OrdersReply, error) {
	m := new(OrdersReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := grpc.Invoke(ctx, "/qpov.Scheduler/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (Scheduler_ResultClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Scheduler_serviceDesc.Streams[2], c.cc, "/qpov.Scheduler/Result", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_ResultClient interface {
	Recv() (*ResultReply, error)
	grpc.ClientStream
}

type schedulerResultClient struct {
	grpc.ClientStream
}

func (x *schedulerResultClient) Recv() (*ResultReply, error) {
	m := new(ResultReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) Certificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateReply, error) {
	out := new(CertificateReply)
	err := grpc.Invoke(ctx, "/qpov.Scheduler/Certificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	// Render client API.
	Get(context.Context, *GetRequest) (*GetReply, error)
	Renew(context.Context, *RenewRequest) (*RenewReply, error)
	Done(context.Context, *DoneRequest) (*DoneReply, error)
	Failed(context.Context, *FailedRequest) (*FailedReply, error)
	// Order handling API. Restricted.
	Add(context.Context, *AddRequest) (*AddReply, error)
	// Stats API. Restricted.
	Lease(context.Context, *LeaseRequest) (*LeaseReply, error)
	Leases(*LeasesRequest, Scheduler_LeasesServer) error
	Order(context.Context, *OrderRequest) (*OrderReply, error)
	Orders(*OrdersRequest, Scheduler_OrdersServer) error
	Stats(context.Context, *StatsRequest) (*StatsReply, error)
	// WebUI magic.
	// rpc UserStats (UserStatsRequest) returns (UserStatsReply) {}
	Result(*ResultRequest, Scheduler_ResultServer) error
	Certificate(context.Context, *CertificateRequest) (*CertificateReply, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Renew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Renew(ctx, req.(*RenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Done(ctx, req.(*DoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Failed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Failed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Failed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Failed(ctx, req.(*FailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Lease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Lease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Lease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Lease(ctx, req.(*LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Leases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LeasesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).Leases(m, &schedulerLeasesServer{stream})
}

type Scheduler_LeasesServer interface {
	Send(*LeasesReply) error
	grpc.ServerStream
}

type schedulerLeasesServer struct {
	grpc.ServerStream
}

func (x *schedulerLeasesServer) Send(m *LeasesReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Order(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Orders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).Orders(m, &schedulerOrdersServer{stream})
}

type Scheduler_OrdersServer interface {
	Send(*OrdersReply) error
	grpc.ServerStream
}

type schedulerOrdersServer struct {
	grpc.ServerStream
}

func (x *schedulerOrdersServer) Send(m *OrdersReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Result_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).Result(m, &schedulerResultServer{stream})
}

type Scheduler_ResultServer interface {
	Send(*ResultReply) error
	grpc.ServerStream
}

type schedulerResultServer struct {
	grpc.ServerStream
}

func (x *schedulerResultServer) Send(m *ResultReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_Certificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Certificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Certificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Certificate(ctx, req.(*CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qpov.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Scheduler_Get_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _Scheduler_Renew_Handler,
		},
		{
			MethodName: "Done",
			Handler:    _Scheduler_Done_Handler,
		},
		{
			MethodName: "Failed",
			Handler:    _Scheduler_Failed_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Scheduler_Add_Handler,
		},
		{
			MethodName: "Lease",
			Handler:    _Scheduler_Lease_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _Scheduler_Order_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Scheduler_Stats_Handler,
		},
		{
			MethodName: "Certificate",
			Handler:    _Scheduler_Certificate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Leases",
			Handler:       _Scheduler_Leases_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Orders",
			Handler:       _Scheduler_Orders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Result",
			Handler:       _Scheduler_Result_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor2 = []byte{
	// 1154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x57, 0x4b, 0x73, 0xdc, 0x44,
	0x10, 0xf6, 0x3e, 0xbd, 0xdb, 0xd2, 0x66, 0xcd, 0xd8, 0x24, 0x62, 0x0b, 0x0a, 0x10, 0x04, 0x08,
	0x95, 0x72, 0x52, 0x4e, 0x0e, 0x70, 0xa1, 0x48, 0xc5, 0xc5, 0xa3, 0x2a, 0x06, 0x4a, 0x0e, 0x07,
	0x4e, 0x5b, 0x8a, 0x34, 0xb6, 0x95, 0x78, 0xa5, 0xcd, 0xce, 0x6c, 0x1e, 0xbf, 0x8c, 0xbf, 0xc0,
	0x85, 0x7f, 0x02, 0xff, 0x21, 0xdd, 0xd3, 0x33, 0xd2, 0xc8, 0x76, 0x6c, 0xdf, 0xd4, 0x8f, 0xe9,
	0xaf, 0x5f, 0xd3, 0xd3, 0x82, 0xa9, 0xca, 0x4e, 0x64, 0xbe, 0x3e, 0x95, 0xab, 0xdd, 0xe5, 0xaa,
	0xd2, 0x95, 0xe8, 0xbf, 0x5c, 0x56, 0xaf, 0x66, 0x41, 0xb5, 0xca, 0x1d, 0x6b, 0x76, 0x63, 0x21,
	0x75, 0x9a, 0xa7, 0x3a, 0x65, 0x3a, 0xfe, 0x0e, 0xc2, 0x27, 0xd5, 0x71, 0x51, 0x26, 0xf2, 0xe5,
	0x5a, 0x2a, 0x2d, 0x6e, 0xc2, 0x30, 0xab, 0xaa, 0x17, 0x85, 0x8c, 0x3a, 0x9f, 0x75, 0xbe, 0x19,
	0x27, 0x96, 0x12, 0x5b, 0xd0, 0x7b, 0xfe, 0x5a, 0x47, 0x5d, 0xc3, 0xa4, 0xcf, 0xf8, 0x4b, 0x00,
	0x7b, 0x72, 0x79, 0xfa, 0xf6, 0x7d, 0xe7, 0xe2, 0xaf, 0x61, 0x82, 0x5a, 0xd5, 0x5a, 0x5f, 0x01,
	0x10, 0x4f, 0x20, 0x70, 0x8a, 0x68, 0x2f, 0xbe, 0x0b, 0xe2, 0xf1, 0x89, 0xcc, 0x5e, 0x3c, 0x36,
	0xd2, 0xab, 0x0e, 0x0b, 0xd8, 0x6a, 0x69, 0x93, 0x85, 0x1d, 0xb4, 0x20, 0x57, 0xba, 0x38, 0x2a,
	0xb2, 0x54, 0x3b, 0x0b, 0xe8, 0xf5, 0x56, 0x8b, 0x4b, 0xbe, 0x63, 0x6c, 0x4b, 0xb9, 0x30, 0x26,
	0xc3, 0x84, 0x3e, 0xe3, 0x10, 0xe0, 0x67, 0xe9, 0x5c, 0x8e, 0xff, 0x80, 0x91, 0xa1, 0x48, 0xf7,
	0x23, 0x18, 0x9d, 0xca, 0x54, 0xc9, 0x79, 0x91, 0x5b, 0x1f, 0x36, 0x0d, 0xfd, 0x6b, 0x2e, 0xee,
	0xc0, 0x96, 0xc9, 0xf4, 0x3c, 0x97, 0x47, 0x45, 0x59, 0xe8, 0xa2, 0x2a, 0x6d, 0xbe, 0xa6, 0x86,
	0xbf, 0x5f, 0xb3, 0xe3, 0x5f, 0x20, 0x4c, 0x64, 0x29, 0x5f, 0xbb, 0xb8, 0x2e, 0xb1, 0xfa, 0x09,
	0x80, 0x7c, 0xa3, 0x65, 0x99, 0xcf, 0x95, 0xcc, 0x8c, 0xbd, 0x41, 0x32, 0x66, 0xce, 0xa1, 0xcc,
	0xe2, 0x87, 0x00, 0xd6, 0x12, 0x79, 0xf7, 0x15, 0x4c, 0xf1, 0x7b, 0xae, 0x8b, 0x85, 0xc4, 0x4c,
	0x9a, 0x13, 0x64, 0xae, 0x97, 0x4c, 0x90, 0xfd, 0x94, 0xb9, 0x74, 0xea, 0x9f, 0x0e, 0x04, 0xfb,
	0x55, 0x29, 0xaf, 0x81, 0xbf, 0x03, 0x83, 0x62, 0x91, 0x1e, 0x4b, 0x03, 0x1d, 0x26, 0x4c, 0x50,
	0x21, 0x94, 0xce, 0xd1, 0x5a, 0xd4, 0x33, 0x6c, 0x4b, 0x59, 0xbe, 0x5c, 0xad, 0xa2, 0x7e, 0xcd,
	0x47, 0x4a, 0x7c, 0x01, 0x93, 0xe7, 0xaa, 0x2a, 0xe7, 0xae, 0xfb, 0xa2, 0x81, 0x41, 0x09, 0x89,
	0x79, 0x60, 0x79, 0xe2, 0x01, 0x8c, 0x6a, 0xf9, 0x10, 0xe5, 0xc1, 0xde, 0xad, 0x5d, 0xea, 0xe0,
	0x5d, 0x8c, 0x10, 0xad, 0x14, 0xe5, 0xb1, 0x53, 0x4d, 0x6a, 0xc5, 0x38, 0x80, 0x31, 0x47, 0x42,
	0x35, 0xff, 0x16, 0x26, 0x3f, 0xa5, 0xc5, 0xa9, 0xcc, 0xaf, 0x0e, 0x8c, 0x1a, 0xce, 0xe9, 0xd2,
	0xd1, 0x04, 0xe0, 0x51, 0x5e, 0x9f, 0xbb, 0xa8, 0x96, 0x9d, 0x0b, 0x6b, 0x49, 0x10, 0xcf, 0x52,
	0x9d, 0x9d, 0x10, 0x44, 0x8f, 0x21, 0x0c, 0x8d, 0x10, 0xb7, 0x61, 0x64, 0x6c, 0xda, 0xc6, 0x61,
	0x8b, 0x8d, 0x27, 0x86, 0x46, 0xb5, 0xff, 0xbb, 0x30, 0x78, 0x42, 0x5e, 0x5d, 0xa2, 0xd4, 0x8a,
	0xa4, 0xdb, 0x2e, 0x91, 0x80, 0x7e, 0x8e, 0x29, 0x30, 0xe8, 0xa3, 0xc4, 0x7c, 0x8b, 0x5b, 0xb0,
	0xb9, 0x56, 0x6c, 0xa8, 0x6f, 0x3a, 0x60, 0x48, 0x24, 0xf7, 0x53, 0xb6, 0x92, 0xd8, 0xfb, 0xf9,
	0x7c, 0xa1, 0x4c, 0x19, 0x7a, 0xc9, 0xd8, 0x72, 0x0e, 0x14, 0x89, 0xd7, 0xcb, 0xdc, 0x89, 0x87,
	0x2c, 0xb6, 0x1c, 0x16, 0xcb, 0x37, 0xcb, 0x62, 0x25, 0x15, 0x89, 0x37, 0x59, 0x6c, 0x39, 0x28,
	0xfe, 0x1c, 0x06, 0xc6, 0xdf, 0x68, 0x64, 0xca, 0x17, 0x70, 0xf9, 0x7e, 0x27, 0x56, 0xc2, 0x92,
	0x56, 0x91, 0xc7, 0xd7, 0x2c, 0x32, 0xb5, 0xd5, 0x91, 0xa9, 0x55, 0x04, 0x26, 0x46, 0x4b, 0x89,
	0x08, 0x36, 0xd3, 0x3c, 0x47, 0x6c, 0x15, 0x05, 0x9c, 0x13, 0x4b, 0x8a, 0x19, 0x8c, 0x4e, 0x2a,
	0xa5, 0xcb, 0x74, 0x21, 0xa3, 0xd0, 0x88, 0x6a, 0x3a, 0xbe, 0x83, 0x33, 0x8f, 0x52, 0x77, 0x8d,
	0x26, 0xb9, 0x87, 0x43, 0x8e, 0x55, 0xa9, 0x86, 0x18, 0x9e, 0x11, 0x18, 0xad, 0x3a, 0x3c, 0x56,
	0x60, 0x09, 0xd9, 0xe6, 0x70, 0x1b, 0xdb, 0x5e, 0x45, 0x7b, 0x7e, 0xd9, 0xd1, 0xb6, 0x55, 0xb5,
	0xb6, 0x39, 0x75, 0xa4, 0x75, 0x61, 0xea, 0xe2, 0x3f, 0x71, 0x96, 0x12, 0x88, 0x72, 0xc6, 0x5d,
	0xe1, 0x3b, 0x5e, 0xe1, 0x77, 0x9c, 0x9d, 0xae, 0x61, 0xda, 0xac, 0xcf, 0xbc, 0xac, 0x73, 0x9b,
	0x34, 0x37, 0xe8, 0x3e, 0x4e, 0x5e, 0x6b, 0xf6, 0x9a, 0x41, 0xfe, 0x05, 0x13, 0xe3, 0xd8, 0xa5,
	0x8e, 0x60, 0xcd, 0xd2, 0x4c, 0x17, 0xaf, 0xa4, 0xf5, 0xc4, 0x52, 0xe2, 0x63, 0x18, 0xaf, 0x4b,
	0xa5, 0xd3, 0x15, 0x76, 0x94, 0xf5, 0xa5, 0x61, 0xe0, 0x35, 0x1c, 0x1b, 0xd3, 0x87, 0x3a, 0xd5,
	0x97, 0x5d, 0x07, 0x87, 0xd8, 0xbd, 0x10, 0xb1, 0xe7, 0x23, 0xe2, 0x8c, 0x0c, 0x9c, 0xbb, 0x14,
	0xe0, 0xed, 0x26, 0xd3, 0x14, 0xe0, 0xd4, 0xcb, 0x34, 0xa1, 0xba, 0x6c, 0xff, 0xdb, 0x81, 0xe9,
	0x21, 0x3f, 0xa8, 0xd8, 0x94, 0x24, 0x51, 0x84, 0x60, 0x84, 0xca, 0x8e, 0x55, 0x4b, 0xd1, 0x78,
	0x63, 0xac, 0xb9, 0x15, 0x77, 0x8d, 0x38, 0x64, 0x26, 0x83, 0x8b, 0x4f, 0x21, 0x20, 0x37, 0x9d,
	0x4a, 0xcf, 0xa8, 0x00, 0xb1, 0xac, 0x02, 0x5a, 0x37, 0xf9, 0x55, 0xee, 0xca, 0x32, 0xe5, 0x59,
	0xb7, 0xe2, 0x81, 0x6f, 0x9d, 0x6b, 0x57, 0x5b, 0xb7, 0x2a, 0xc3, 0xc6, 0x3a, 0x2b, 0xc4, 0xdf,
	0x43, 0x68, 0x82, 0xf0, 0x46, 0x9c, 0xaa, 0xc3, 0x9b, 0x2b, 0x12, 0xd9, 0xfa, 0x4d, 0x55, 0x3b,
	0xec, 0xf8, 0x37, 0x00, 0x7b, 0x94, 0xf2, 0xf7, 0xe3, 0x7b, 0x0e, 0x06, 0x7b, 0x1f, 0x72, 0x2a,
	0xcf, 0x64, 0xed, 0xbc, 0xbd, 0x1f, 0x60, 0x92, 0x48, 0xb5, 0x3e, 0xd5, 0xd7, 0x78, 0x7f, 0xa8,
	0xd0, 0xd4, 0xb5, 0xae, 0xd0, 0xd4, 0xb1, 0xfb, 0x10, 0xb8, 0xf3, 0xdc, 0xb1, 0x61, 0x56, 0x95,
	0xf8, 0x22, 0xea, 0xb9, 0x7e, 0xbb, 0x74, 0xbb, 0x41, 0x60, 0x79, 0x4f, 0x91, 0xd5, 0xb2, 0x12,
	0xb2, 0x95, 0xbd, 0xbf, 0x3b, 0x30, 0xe1, 0x85, 0xe1, 0xa0, 0xc2, 0xfe, 0xc3, 0x5b, 0x72, 0x0f,
	0xe7, 0x30, 0xad, 0x34, 0x42, 0xd8, 0xa6, 0xf7, 0x36, 0xa3, 0xd9, 0x56, 0x8b, 0x47, 0x4f, 0xc6,
	0x86, 0xd8, 0x83, 0x21, 0x2f, 0x2d, 0x62, 0xbb, 0x96, 0x36, 0xbb, 0xce, 0xec, 0x83, 0x36, 0x93,
	0xcf, 0x3c, 0x82, 0xc0, 0xdb, 0x55, 0x44, 0xc4, 0x3a, 0xe7, 0x97, 0x9d, 0xd9, 0xcd, 0x0b, 0x24,
	0xc6, 0xc4, 0xde, 0x7f, 0x7d, 0x18, 0x1f, 0xba, 0x5d, 0x0f, 0x0b, 0xd9, 0xc3, 0xf5, 0x44, 0x58,
	0xff, 0x9a, 0xbd, 0x65, 0x76, 0xc3, 0xe3, 0x30, 0x36, 0x06, 0x68, 0xb6, 0x05, 0x17, 0xa0, 0xbf,
	0x84, 0xb8, 0x00, 0x9b, 0x75, 0x02, 0x0f, 0xdc, 0x85, 0x3e, 0xbd, 0xae, 0xc2, 0x46, 0xe2, 0xed,
	0x0c, 0xb3, 0xa9, 0xcf, 0xaa, 0xd3, 0xc1, 0x4f, 0xaa, 0x4b, 0x47, 0xeb, 0x31, 0x76, 0xe9, 0xf0,
	0x5f, 0xdd, 0x0d, 0xf2, 0x1e, 0xdf, 0x48, 0xe7, 0x7d, 0xf3, 0x04, 0x3b, 0xef, 0xdd, 0x03, 0xca,
	0xde, 0xf3, 0x33, 0x29, 0xfc, 0x99, 0x74, 0xa6, 0x3c, 0xf5, 0xb4, 0xc6, 0x03, 0x0f, 0xb1, 0x3c,
	0x7c, 0x3b, 0xb6, 0x3d, 0xa9, 0x3a, 0x5b, 0x9e, 0x66, 0xf8, 0xc5, 0x1b, 0xf7, 0x3b, 0x04, 0x63,
	0x2e, 0xa4, 0x83, 0xf1, 0xe7, 0xb9, 0x83, 0x69, 0x06, 0x37, 0xc3, 0xd8, 0x1b, 0xbc, 0xed, 0x49,
	0xcf, 0xc2, 0x78, 0x23, 0xc8, 0xc1, 0xf0, 0x50, 0xb1, 0x30, 0xfe, 0xe5, 0x74, 0x30, 0xcd, 0xad,
	0x63, 0x18, 0xee, 0x7a, 0x07, 0xd3, 0xba, 0x43, 0x0e, 0xc6, 0xbb, 0x18, 0x06, 0x86, 0xda, 0xad,
	0x59, 0x78, 0xeb, 0x76, 0x3b, 0xb7, 0x19, 0xd7, 0xed, 0x76, 0x66, 0x3b, 0x8e, 0x37, 0x9e, 0x0d,
	0xcd, 0xaf, 0xc2, 0x83, 0x77, 0x01, 0x00, 0x00, 0xff, 0xff, 0x11, 0x52, 0x0d, 0x96, 0x60, 0x0c,
	0x00, 0x00,
}
