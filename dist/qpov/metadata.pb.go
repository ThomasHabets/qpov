// Code generated by protoc-gen-go.
// source: metadata.proto
// DO NOT EDIT!

/*
Package qpov is a generated protocol buffer package.

It is generated from these files:
	metadata.proto
	order.proto
	scheduler.proto
	stats.proto

It has these top-level messages:
	Rusage
	Uname
	Cloud
	RenderingMetadata
	Order
	LoginRequest
	LoginReply
	LogoutRequest
	LogoutReply
	CheckCookieRequest
	CheckCookieReply
	CertificateRequest
	CertificateReply
	GetRequest
	GetReply
	RenewRequest
	RenewReply
	DoneRequest
	DoneReply
	FailedRequest
	FailedReply
	AddRequest
	AddReply
	Lease
	LeaseRequest
	LeaseReply
	LeasesRequest
	LeasesReply
	OrdersRequest
	OrderStat
	OrdersReply
	SchedulingStats
	StatsRequest
	StatsReply
	ResultRequest
	ResultReply
	StatsCPUTime
	MachineStats
	BatchStats
	StatsOverall
*/
package qpov

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// From getrusage(2).
type Rusage struct {
	Utime    int64 `protobuf:"varint,1,opt,name=utime" json:"utime,omitempty"`
	Stime    int64 `protobuf:"varint,2,opt,name=stime" json:"stime,omitempty"`
	Maxrss   int64 `protobuf:"varint,3,opt,name=maxrss" json:"maxrss,omitempty"`
	Ixrss    int64 `protobuf:"varint,4,opt,name=ixrss" json:"ixrss,omitempty"`
	Idrss    int64 `protobuf:"varint,5,opt,name=idrss" json:"idrss,omitempty"`
	Isrss    int64 `protobuf:"varint,6,opt,name=isrss" json:"isrss,omitempty"`
	Minflt   int64 `protobuf:"varint,7,opt,name=minflt" json:"minflt,omitempty"`
	Majflt   int64 `protobuf:"varint,8,opt,name=majflt" json:"majflt,omitempty"`
	Nswap    int64 `protobuf:"varint,9,opt,name=nswap" json:"nswap,omitempty"`
	Inblock  int64 `protobuf:"varint,10,opt,name=inblock" json:"inblock,omitempty"`
	Oublock  int64 `protobuf:"varint,11,opt,name=oublock" json:"oublock,omitempty"`
	Msgsnd   int64 `protobuf:"varint,12,opt,name=msgsnd" json:"msgsnd,omitempty"`
	Msgrcv   int64 `protobuf:"varint,13,opt,name=msgrcv" json:"msgrcv,omitempty"`
	Nsignals int64 `protobuf:"varint,14,opt,name=nsignals" json:"nsignals,omitempty"`
	Nvcsw    int64 `protobuf:"varint,15,opt,name=nvcsw" json:"nvcsw,omitempty"`
	Nivcsw   int64 `protobuf:"varint,16,opt,name=nivcsw" json:"nivcsw,omitempty"`
}

func (m *Rusage) Reset()                    { *m = Rusage{} }
func (m *Rusage) String() string            { return proto.CompactTextString(m) }
func (*Rusage) ProtoMessage()               {}
func (*Rusage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// From uname(2).
type Uname struct {
	Sysname    string `protobuf:"bytes,1,opt,name=sysname" json:"sysname,omitempty"`
	Nodename   string `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
	Release    string `protobuf:"bytes,3,opt,name=release" json:"release,omitempty"`
	Version    string `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	Machine    string `protobuf:"bytes,5,opt,name=machine" json:"machine,omitempty"`
	Domainname string `protobuf:"bytes,6,opt,name=domainname" json:"domainname,omitempty"`
}

func (m *Uname) Reset()                    { *m = Uname{} }
func (m *Uname) String() string            { return proto.CompactTextString(m) }
func (*Uname) ProtoMessage()               {}
func (*Uname) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Cloud struct {
	Provider     string `protobuf:"bytes,1,opt,name=provider" json:"provider,omitempty"`
	InstanceType string `protobuf:"bytes,2,opt,name=instance_type,json=instanceType" json:"instance_type,omitempty"`
}

func (m *Cloud) Reset()                    { *m = Cloud{} }
func (m *Cloud) String() string            { return proto.CompactTextString(m) }
func (*Cloud) ProtoMessage()               {}
func (*Cloud) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RenderingMetadata struct {
	// Who and what.
	User        string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	OrderString string `protobuf:"bytes,2,opt,name=order_string,json=orderString" json:"order_string,omitempty"`
	Order       *Order `protobuf:"bytes,3,opt,name=order" json:"order,omitempty"`
	// POV-Ray run stats.
	StartMs  int64   `protobuf:"varint,10,opt,name=start_ms,json=startMs" json:"start_ms,omitempty"`
	EndMs    int64   `protobuf:"varint,11,opt,name=end_ms,json=endMs" json:"end_ms,omitempty"`
	SystemMs int64   `protobuf:"varint,12,opt,name=system_ms,json=systemMs" json:"system_ms,omitempty"`
	UserMs   int64   `protobuf:"varint,13,opt,name=user_ms,json=userMs" json:"user_ms,omitempty"`
	Rusage   *Rusage `protobuf:"bytes,14,opt,name=rusage" json:"rusage,omitempty"`
	// System info.
	Hostname string `protobuf:"bytes,20,opt,name=hostname" json:"hostname,omitempty"`
	Uname    *Uname `protobuf:"bytes,21,opt,name=uname" json:"uname,omitempty"`
	NumCpu   int32  `protobuf:"varint,22,opt,name=num_cpu,json=numCpu" json:"num_cpu,omitempty"`
	Version  string `protobuf:"bytes,23,opt,name=version" json:"version,omitempty"`
	Cloud    *Cloud `protobuf:"bytes,24,opt,name=cloud" json:"cloud,omitempty"`
	Comment  string `protobuf:"bytes,25,opt,name=comment" json:"comment,omitempty"`
	Cpuinfo  string `protobuf:"bytes,26,opt,name=cpuinfo" json:"cpuinfo,omitempty"`
	// POV-Ray.
	Stdout []byte `protobuf:"bytes,30,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr []byte `protobuf:"bytes,31,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (m *RenderingMetadata) Reset()                    { *m = RenderingMetadata{} }
func (m *RenderingMetadata) String() string            { return proto.CompactTextString(m) }
func (*RenderingMetadata) ProtoMessage()               {}
func (*RenderingMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RenderingMetadata) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *RenderingMetadata) GetRusage() *Rusage {
	if m != nil {
		return m.Rusage
	}
	return nil
}

func (m *RenderingMetadata) GetUname() *Uname {
	if m != nil {
		return m.Uname
	}
	return nil
}

func (m *RenderingMetadata) GetCloud() *Cloud {
	if m != nil {
		return m.Cloud
	}
	return nil
}

func init() {
	proto.RegisterType((*Rusage)(nil), "qpov.Rusage")
	proto.RegisterType((*Uname)(nil), "qpov.Uname")
	proto.RegisterType((*Cloud)(nil), "qpov.Cloud")
	proto.RegisterType((*RenderingMetadata)(nil), "qpov.RenderingMetadata")
}

var fileDescriptor0 = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x94, 0xcf, 0x72, 0xd3, 0x30,
	0x10, 0xc6, 0xa7, 0x4d, 0xec, 0x24, 0x4a, 0x5a, 0x40, 0xd3, 0x3f, 0x6a, 0x98, 0x29, 0x10, 0x38,
	0x70, 0xca, 0xa1, 0x3c, 0x42, 0x2f, 0x5c, 0x3a, 0xcc, 0x18, 0x38, 0x67, 0x54, 0x5b, 0xa4, 0x82,
	0x58, 0x32, 0xfa, 0x93, 0xd2, 0x2b, 0xaf, 0xc3, 0xeb, 0xf1, 0x00, 0xec, 0xae, 0x64, 0x4f, 0xb8,
	0xe5, 0xf7, 0x7d, 0xf2, 0xee, 0x5a, 0xfb, 0x39, 0xec, 0xb4, 0x55, 0x41, 0x36, 0x32, 0xc8, 0x75,
	0xe7, 0x6c, 0xb0, 0x7c, 0xfc, 0xb3, 0xb3, 0xfb, 0xe5, 0xdc, 0xba, 0x46, 0xb9, 0x24, 0xad, 0x7e,
	0x8f, 0x58, 0x59, 0x45, 0x2f, 0xb7, 0x8a, 0x9f, 0xb1, 0x22, 0x06, 0xdd, 0x2a, 0x71, 0xf4, 0xfa,
	0xe8, 0xfd, 0xa8, 0x4a, 0x80, 0xaa, 0x27, 0xf5, 0x38, 0xa9, 0x04, 0xfc, 0x82, 0x95, 0xad, 0xfc,
	0xe5, 0xbc, 0x17, 0x23, 0x92, 0x33, 0xe1, 0x69, 0x4d, 0xf2, 0x38, 0x9d, 0xd6, 0x83, 0xda, 0xa0,
	0x5a, 0x64, 0xb5, 0xe9, 0x55, 0x8f, 0x6a, 0x99, 0x55, 0x04, 0xaa, 0xac, 0xcd, 0xb7, 0x5d, 0x10,
	0x93, 0x5c, 0x99, 0x28, 0x75, 0xfc, 0x8e, 0xfa, 0xb4, 0xef, 0x88, 0x84, 0x55, 0x8c, 0x7f, 0x94,
	0x9d, 0x98, 0xa5, 0x2a, 0x04, 0x5c, 0xb0, 0x89, 0x36, 0xf7, 0x3b, 0x5b, 0xff, 0x10, 0x8c, 0xf4,
	0x1e, 0xd1, 0xb1, 0x31, 0x39, 0xf3, 0xe4, 0x64, 0xa4, 0x0e, 0x7e, 0xeb, 0x4d, 0x23, 0x16, 0xb9,
	0x03, 0x51, 0xd6, 0x5d, 0xbd, 0x17, 0x27, 0x83, 0x0e, 0xc4, 0x97, 0x6c, 0x6a, 0xbc, 0xde, 0x1a,
	0xb9, 0xf3, 0xe2, 0x94, 0x9c, 0x81, 0x69, 0xaa, 0x7d, 0xed, 0x1f, 0xc5, 0xb3, 0x3c, 0x15, 0x02,
	0x56, 0x32, 0x9a, 0xe4, 0xe7, 0xa9, 0x52, 0xa2, 0xd5, 0x9f, 0x23, 0x56, 0x7c, 0x35, 0x12, 0xee,
	0x15, 0xa6, 0xf3, 0x4f, 0x1e, 0x7f, 0xd2, 0x16, 0x66, 0x55, 0x8f, 0xd4, 0xcd, 0x36, 0x8a, 0xac,
	0x63, 0xb2, 0x06, 0xc6, 0xa7, 0x9c, 0xda, 0x29, 0xe9, 0x15, 0xad, 0x03, 0x9e, 0xca, 0x88, 0xce,
	0x5e, 0x39, 0xaf, 0xad, 0xa1, 0x8d, 0x80, 0x93, 0x11, 0x9d, 0x56, 0xd6, 0x0f, 0xda, 0x28, 0xda,
	0x0a, 0x38, 0x19, 0xf9, 0x35, 0x63, 0x8d, 0x6d, 0xa5, 0x36, 0xd4, 0xab, 0x24, 0xf3, 0x40, 0x59,
	0x7d, 0x64, 0xc5, 0xed, 0xce, 0xc6, 0x06, 0x47, 0x82, 0x10, 0xed, 0x35, 0xa4, 0x29, 0x4f, 0x3b,
	0x30, 0x7f, 0xcb, 0x4e, 0xb4, 0xf1, 0x41, 0x9a, 0x5a, 0x6d, 0xc2, 0x53, 0xd7, 0xcf, 0xbc, 0xe8,
	0xc5, 0x2f, 0xa0, 0xad, 0xfe, 0x8e, 0xd8, 0x8b, 0x4a, 0x19, 0x38, 0xaf, 0xcd, 0xf6, 0x2e, 0x67,
	0x95, 0x73, 0x36, 0x8e, 0x7e, 0x28, 0x49, 0xbf, 0xf9, 0x1b, 0xb6, 0xa0, 0xd4, 0x6e, 0x7c, 0xc0,
	0xb3, 0xb9, 0x5a, 0x4a, 0xf2, 0x67, 0x92, 0xe0, 0x48, 0x41, 0x48, 0x57, 0x30, 0xbf, 0x99, 0xaf,
	0x31, 0xec, 0xeb, 0x4f, 0x28, 0x55, 0xc9, 0xe1, 0x57, 0x6c, 0x0a, 0xdd, 0x5d, 0xd8, 0xb4, 0xbe,
	0x8f, 0x05, 0xf1, 0x9d, 0xe7, 0xe7, 0xac, 0x84, 0x41, 0xd0, 0x48, 0xa9, 0x28, 0x80, 0x40, 0x7e,
	0xc9, 0x66, 0xb0, 0x80, 0xa0, 0x5a, 0x74, 0x52, 0x2c, 0xa6, 0x49, 0x00, 0xf3, 0x92, 0x4d, 0x70,
	0x38, 0xb4, 0x72, 0x32, 0x10, 0xc1, 0x78, 0xc7, 0x4a, 0x47, 0xdf, 0x14, 0xe5, 0x62, 0x7e, 0xb3,
	0x48, 0xb3, 0xa4, 0xef, 0xac, 0xca, 0x1e, 0x5e, 0xdf, 0x83, 0xf5, 0x81, 0x6e, 0xf9, 0x2c, 0x5d,
	0x5f, 0xcf, 0xf8, 0x32, 0x91, 0x8c, 0xf3, 0xc3, 0x97, 0xa1, 0x8c, 0x54, 0xc9, 0xc1, 0xee, 0x26,
	0xb6, 0x9b, 0xba, 0x8b, 0xe2, 0x02, 0x0e, 0x15, 0x90, 0xa6, 0xd8, 0xde, 0x76, 0xf1, 0x70, 0xe7,
	0x97, 0xff, 0xef, 0x1c, 0xaa, 0xd6, 0xb8, 0x39, 0x21, 0x0e, 0xab, 0xd2, 0x32, 0xab, 0xe4, 0xe0,
	0xc3, 0xb5, 0x6d, 0x5b, 0x65, 0x82, 0xb8, 0x4a, 0x0f, 0x67, 0x24, 0xa7, 0x8b, 0xf0, 0x31, 0x5a,
	0xb1, 0xcc, 0x4e, 0x42, 0x8c, 0xb5, 0x0f, 0x8d, 0x8d, 0x41, 0x5c, 0x83, 0xb1, 0xa8, 0x32, 0x65,
	0x5d, 0x39, 0x27, 0x5e, 0x0d, 0x3a, 0xd0, 0x7d, 0x49, 0x7f, 0x3d, 0x1f, 0xfe, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xb9, 0x99, 0x1d, 0x55, 0x9f, 0x04, 0x00, 0x00,
}
