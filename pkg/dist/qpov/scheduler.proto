syntax = "proto3";
package qpov;
option go_package = "pkg/dist/qpov";
import "order.proto";
import "metadata.proto";

// CookieMonster keeps login state keyed by cookie.
service CookieMonster {
        rpc Login (LoginRequest) returns (LoginReply) {}
        rpc Logout (LogoutRequest) returns (LogoutReply) {}
        rpc CheckCookie (CheckCookieRequest) returns (CheckCookieReply) {}
}

message LoginRequest {
        string cookie = 1; // If existing.
        string jwt = 2;
}

message LoginReply {
        string cookie = 1;
}

message LogoutRequest {
        string cookie = 1;
}

message LogoutReply {}

message CheckCookieRequest {
        string cookie = 1;
}

message CheckCookieReply {}

service Scheduler {
        // Render client API.
        rpc Get (GetRequest) returns (GetReply) {}
        rpc Renew (RenewRequest) returns (RenewReply) {}
        rpc Done (DoneRequest) returns (DoneReply) {}
        rpc Failed (FailedRequest) returns (FailedReply) {}

        // Order handling API. Restricted.
        rpc Add (AddRequest) returns (AddReply) {}

        // Stats API. Restricted.
        rpc Lease (LeaseRequest) returns (LeaseReply) {}
        rpc Leases (LeasesRequest) returns (stream LeasesReply) {}
        rpc Order (OrderRequest) returns (OrderReply) {}
        rpc Orders (OrdersRequest) returns (stream OrdersReply) {}

        // Stats API, unrestricted.
        rpc Stats (StatsRequest) returns (StatsReply) {}

        // WebUI magic.
        // rpc UserStats (UserStatsRequest) returns (UserStatsReply) {}
        rpc Result (ResultRequest) returns (stream ResultReply) {}

        rpc Certificate (CertificateRequest) returns (CertificateReply) {}
}

message CertificateRequest {}
message CertificateReply {
        bytes pem = 1;
}

message GetRequest {}

message GetReply {
        string lease_id = 1;
        string order_definition = 2;
}

message RenewRequest {
        string lease_id = 1;
        int32 extend_sec = 2;
}

message RenewReply {
        int64 new_timeout_sec = 1; // May be longer or shorter than now+extend_sec.
}

message DoneRequest {
        string lease_id = 1;
        bytes image = 2;
        bytes stdout = 3; // DEPRECATED. Use the one in metadata.
        bytes stderr = 4; // DEPRECATED. Use the one in metadata.
        string json_metadata = 5; // DEPRECATED. Use metadata.
        RenderingMetadata metadata = 6;
}

message DoneReply {}

message FailedRequest {
        string lease_id = 1;
}

message FailedReply {}

message AddRequest {
        string order_definition = 1;
        // string destination = 2; // DEPRECATED: Directory to store the results as <file>.png and <file>.proto.
        string batch_id = 3; // Optional.
}

message AddReply {
        string order_id = 1;
}

message Lease {
        string order_id = 1;
        string lease_id = 2;
        bool done = 3;
        int64 user_id = 4;
        int64 created_ms = 5;
        int64 updated_ms = 6;
        int64 expires_ms = 7;
        Order order = 8;
        RenderingMetadata metadata = 9;
        bool failed = 10;
        string address = 11;  // Last communication came from here.
        string hostname = 12; // Hostname of that node (if available).
}

message LeaseRequest {
        string lease_id = 1;
}
message LeaseReply {
        Lease lease = 1;
}

message OrderRequest {
        repeated string order_id = 1;
}
message OrderReply {
        repeated Order order = 1;
}

message LeasesRequest {
        bool done = 1;
        bool order = 2;
        bool metadata = 3;
        int64 since = 4; // Updated more recently than X seconds since 1970.
        string batch = 5; // If set, only return leases from this batch;
}

message LeasesReply {
        Lease lease = 1;
}

message OrdersRequest {
        bool done = 1;
        bool active = 2;
        bool unstarted = 3;
}

message OrderStat {
        string order_id = 1;
        bool done = 2;
        bool active = 3;
        string batch_id = 4;
}

message OrdersReply {
        OrderStat order = 1;
}

message SchedulingStats {
        int64 orders = 1;         // Total orders in the system.
        int64 active_orders = 2;  // Orders currently rendering.
        int64 done_orders = 3;    // Finished orders.

        int64 leases = 4;         // Total leases ever.
        int64 active_leases = 5;  // Active leases. Equal to or greater than active_orders.
        int64 done_leases = 6;    // Finished renderings.  Equal to or greater than done_orders.
}

message StatsRequest {
        bool scheduling_stats = 1;
}

// Global stats.
message StatsReply {
        SchedulingStats scheduling_stats = 1;
}

message ResultRequest {
        string lease_id = 1;
        bool data = 2;
}

message ResultReply {
        string content_type = 1;
        bytes data = 2;
}
