// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: stats.proto

package qpov

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatsCPUTime struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserSeconds   int64                  `protobuf:"varint,2,opt,name=user_seconds,json=userSeconds,proto3" json:"user_seconds,omitempty"`
	SystemSeconds int64                  `protobuf:"varint,3,opt,name=system_seconds,json=systemSeconds,proto3" json:"system_seconds,omitempty"`
	// Standardized compute core-seconds.
	// Baseline CPU: One core from a "Core(TM)2 Quad CPU Q6600 @ 2.40GHz".
	ComputeSeconds int64 `protobuf:"varint,4,opt,name=compute_seconds,json=computeSeconds,proto3" json:"compute_seconds,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StatsCPUTime) Reset() {
	*x = StatsCPUTime{}
	mi := &file_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatsCPUTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsCPUTime) ProtoMessage() {}

func (x *StatsCPUTime) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsCPUTime.ProtoReflect.Descriptor instead.
func (*StatsCPUTime) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{0}
}

func (x *StatsCPUTime) GetUserSeconds() int64 {
	if x != nil {
		return x.UserSeconds
	}
	return 0
}

func (x *StatsCPUTime) GetSystemSeconds() int64 {
	if x != nil {
		return x.SystemSeconds
	}
	return 0
}

func (x *StatsCPUTime) GetComputeSeconds() int64 {
	if x != nil {
		return x.ComputeSeconds
	}
	return 0
}

type MachineStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// E.g. "Amazon/c4.8xlarge 36 x Intel(R) Xeon(R) CPU E5-2666 v3 @ 2.90GHz".
	ArchSummary   string        `protobuf:"bytes,1,opt,name=arch_summary,json=archSummary,proto3" json:"arch_summary,omitempty"`
	Cpu           string        `protobuf:"bytes,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	NumCpu        int32         `protobuf:"varint,3,opt,name=num_cpu,json=numCpu,proto3" json:"num_cpu,omitempty"`
	Cloud         *Cloud        `protobuf:"bytes,4,opt,name=cloud,proto3" json:"cloud,omitempty"`
	CpuTime       *StatsCPUTime `protobuf:"bytes,5,opt,name=cpu_time,json=cpuTime,proto3" json:"cpu_time,omitempty"`
	Jobs          int64         `protobuf:"varint,6,opt,name=jobs,proto3" json:"jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineStats) Reset() {
	*x = MachineStats{}
	mi := &file_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineStats) ProtoMessage() {}

func (x *MachineStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineStats.ProtoReflect.Descriptor instead.
func (*MachineStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{1}
}

func (x *MachineStats) GetArchSummary() string {
	if x != nil {
		return x.ArchSummary
	}
	return ""
}

func (x *MachineStats) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *MachineStats) GetNumCpu() int32 {
	if x != nil {
		return x.NumCpu
	}
	return 0
}

func (x *MachineStats) GetCloud() *Cloud {
	if x != nil {
		return x.Cloud
	}
	return nil
}

func (x *MachineStats) GetCpuTime() *StatsCPUTime {
	if x != nil {
		return x.CpuTime
	}
	return nil
}

func (x *MachineStats) GetJobs() int64 {
	if x != nil {
		return x.Jobs
	}
	return 0
}

type BatchStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BatchId       string                 `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // Number of orders.
	Done          int64                  `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`   // Completed orders.
	Comment       string                 `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Ctime         int64                  `protobuf:"varint,5,opt,name=ctime,proto3" json:"ctime,omitempty"`
	CpuTime       *StatsCPUTime          `protobuf:"bytes,6,opt,name=cpu_time,json=cpuTime,proto3" json:"cpu_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchStats) Reset() {
	*x = BatchStats{}
	mi := &file_stats_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchStats) ProtoMessage() {}

func (x *BatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchStats.ProtoReflect.Descriptor instead.
func (*BatchStats) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{2}
}

func (x *BatchStats) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchStats) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *BatchStats) GetDone() int64 {
	if x != nil {
		return x.Done
	}
	return 0
}

func (x *BatchStats) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BatchStats) GetCtime() int64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *BatchStats) GetCpuTime() *StatsCPUTime {
	if x != nil {
		return x.CpuTime
	}
	return nil
}

type StatsOverall struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// When these stats were calculated.
	StatsTimestamp int64 `protobuf:"varint,1,opt,name=stats_timestamp,json=statsTimestamp,proto3" json:"stats_timestamp,omitempty"`
	// User and system time.
	CpuTime *StatsCPUTime `protobuf:"bytes,2,opt,name=cpu_time,json=cpuTime,proto3" json:"cpu_time,omitempty"`
	// (user_seconds+system_seconds) / CPU cores.
	MachineTime *StatsCPUTime `protobuf:"bytes,3,opt,name=machine_time,json=machineTime,proto3" json:"machine_time,omitempty"`
	// Total time completed leases have been outstanding.
	LeaseSeconds int64 `protobuf:"varint,4,opt,name=lease_seconds,json=leaseSeconds,proto3" json:"lease_seconds,omitempty"`
	// Split out by machine type.
	MachineStats  []*MachineStats `protobuf:"bytes,5,rep,name=machine_stats,json=machineStats,proto3" json:"machine_stats,omitempty"`
	BatchStats    []*BatchStats   `protobuf:"bytes,6,rep,name=batch_stats,json=batchStats,proto3" json:"batch_stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatsOverall) Reset() {
	*x = StatsOverall{}
	mi := &file_stats_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatsOverall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsOverall) ProtoMessage() {}

func (x *StatsOverall) ProtoReflect() protoreflect.Message {
	mi := &file_stats_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsOverall.ProtoReflect.Descriptor instead.
func (*StatsOverall) Descriptor() ([]byte, []int) {
	return file_stats_proto_rawDescGZIP(), []int{3}
}

func (x *StatsOverall) GetStatsTimestamp() int64 {
	if x != nil {
		return x.StatsTimestamp
	}
	return 0
}

func (x *StatsOverall) GetCpuTime() *StatsCPUTime {
	if x != nil {
		return x.CpuTime
	}
	return nil
}

func (x *StatsOverall) GetMachineTime() *StatsCPUTime {
	if x != nil {
		return x.MachineTime
	}
	return nil
}

func (x *StatsOverall) GetLeaseSeconds() int64 {
	if x != nil {
		return x.LeaseSeconds
	}
	return 0
}

func (x *StatsOverall) GetMachineStats() []*MachineStats {
	if x != nil {
		return x.MachineStats
	}
	return nil
}

func (x *StatsOverall) GetBatchStats() []*BatchStats {
	if x != nil {
		return x.BatchStats
	}
	return nil
}

var File_stats_proto protoreflect.FileDescriptor

var file_stats_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x71,
	0x70, 0x6f, 0x76, 0x1a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x50, 0x55,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x70, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x12, 0x21, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x71, 0x70, 0x6f, 0x76, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x70, 0x75,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x70,
	0x6f, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0xb0, 0x01, 0x0a,
	0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x70, 0x6f, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43,
	0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xae, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x70, 0x75,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x70,
	0x6f, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x71, 0x70, 0x6f, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x50, 0x55, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x70,
	0x6f, 0x76, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x71, 0x70, 0x6f, 0x76, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x0f, 0x5a, 0x0d, 0x70, 0x6b, 0x67, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x71, 0x70, 0x6f,
	0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_stats_proto_rawDescOnce sync.Once
	file_stats_proto_rawDescData []byte
)

func file_stats_proto_rawDescGZIP() []byte {
	file_stats_proto_rawDescOnce.Do(func() {
		file_stats_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stats_proto_rawDesc), len(file_stats_proto_rawDesc)))
	})
	return file_stats_proto_rawDescData
}

var file_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_stats_proto_goTypes = []any{
	(*StatsCPUTime)(nil), // 0: qpov.StatsCPUTime
	(*MachineStats)(nil), // 1: qpov.MachineStats
	(*BatchStats)(nil),   // 2: qpov.BatchStats
	(*StatsOverall)(nil), // 3: qpov.StatsOverall
	(*Cloud)(nil),        // 4: qpov.Cloud
}
var file_stats_proto_depIdxs = []int32{
	4, // 0: qpov.MachineStats.cloud:type_name -> qpov.Cloud
	0, // 1: qpov.MachineStats.cpu_time:type_name -> qpov.StatsCPUTime
	0, // 2: qpov.BatchStats.cpu_time:type_name -> qpov.StatsCPUTime
	0, // 3: qpov.StatsOverall.cpu_time:type_name -> qpov.StatsCPUTime
	0, // 4: qpov.StatsOverall.machine_time:type_name -> qpov.StatsCPUTime
	1, // 5: qpov.StatsOverall.machine_stats:type_name -> qpov.MachineStats
	2, // 6: qpov.StatsOverall.batch_stats:type_name -> qpov.BatchStats
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_stats_proto_init() }
func file_stats_proto_init() {
	if File_stats_proto != nil {
		return
	}
	file_metadata_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stats_proto_rawDesc), len(file_stats_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stats_proto_goTypes,
		DependencyIndexes: file_stats_proto_depIdxs,
		MessageInfos:      file_stats_proto_msgTypes,
	}.Build()
	File_stats_proto = out.File
	file_stats_proto_goTypes = nil
	file_stats_proto_depIdxs = nil
}
