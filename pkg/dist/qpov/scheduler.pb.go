// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduler.proto

package qpov

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginRequest struct {
	Cookie               string   `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	Jwt                  string   `protobuf:"bytes,2,opt,name=jwt,proto3" json:"jwt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{0}
}
func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (dst *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(dst, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *LoginRequest) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type LoginReply struct {
	Cookie               string   `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginReply) Reset()         { *m = LoginReply{} }
func (m *LoginReply) String() string { return proto.CompactTextString(m) }
func (*LoginReply) ProtoMessage()    {}
func (*LoginReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{1}
}
func (m *LoginReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginReply.Unmarshal(m, b)
}
func (m *LoginReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginReply.Marshal(b, m, deterministic)
}
func (dst *LoginReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginReply.Merge(dst, src)
}
func (m *LoginReply) XXX_Size() int {
	return xxx_messageInfo_LoginReply.Size(m)
}
func (m *LoginReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginReply.DiscardUnknown(m)
}

var xxx_messageInfo_LoginReply proto.InternalMessageInfo

func (m *LoginReply) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type LogoutRequest struct {
	Cookie               string   `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogoutRequest) Reset()         { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()    {}
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{2}
}
func (m *LogoutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogoutRequest.Unmarshal(m, b)
}
func (m *LogoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogoutRequest.Marshal(b, m, deterministic)
}
func (dst *LogoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutRequest.Merge(dst, src)
}
func (m *LogoutRequest) XXX_Size() int {
	return xxx_messageInfo_LogoutRequest.Size(m)
}
func (m *LogoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutRequest proto.InternalMessageInfo

func (m *LogoutRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type LogoutReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogoutReply) Reset()         { *m = LogoutReply{} }
func (m *LogoutReply) String() string { return proto.CompactTextString(m) }
func (*LogoutReply) ProtoMessage()    {}
func (*LogoutReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{3}
}
func (m *LogoutReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogoutReply.Unmarshal(m, b)
}
func (m *LogoutReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogoutReply.Marshal(b, m, deterministic)
}
func (dst *LogoutReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogoutReply.Merge(dst, src)
}
func (m *LogoutReply) XXX_Size() int {
	return xxx_messageInfo_LogoutReply.Size(m)
}
func (m *LogoutReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LogoutReply.DiscardUnknown(m)
}

var xxx_messageInfo_LogoutReply proto.InternalMessageInfo

type CheckCookieRequest struct {
	Cookie               string   `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckCookieRequest) Reset()         { *m = CheckCookieRequest{} }
func (m *CheckCookieRequest) String() string { return proto.CompactTextString(m) }
func (*CheckCookieRequest) ProtoMessage()    {}
func (*CheckCookieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{4}
}
func (m *CheckCookieRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckCookieRequest.Unmarshal(m, b)
}
func (m *CheckCookieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckCookieRequest.Marshal(b, m, deterministic)
}
func (dst *CheckCookieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCookieRequest.Merge(dst, src)
}
func (m *CheckCookieRequest) XXX_Size() int {
	return xxx_messageInfo_CheckCookieRequest.Size(m)
}
func (m *CheckCookieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCookieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCookieRequest proto.InternalMessageInfo

func (m *CheckCookieRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type CheckCookieReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckCookieReply) Reset()         { *m = CheckCookieReply{} }
func (m *CheckCookieReply) String() string { return proto.CompactTextString(m) }
func (*CheckCookieReply) ProtoMessage()    {}
func (*CheckCookieReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{5}
}
func (m *CheckCookieReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckCookieReply.Unmarshal(m, b)
}
func (m *CheckCookieReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckCookieReply.Marshal(b, m, deterministic)
}
func (dst *CheckCookieReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCookieReply.Merge(dst, src)
}
func (m *CheckCookieReply) XXX_Size() int {
	return xxx_messageInfo_CheckCookieReply.Size(m)
}
func (m *CheckCookieReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCookieReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCookieReply proto.InternalMessageInfo

type CertificateRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateRequest) Reset()         { *m = CertificateRequest{} }
func (m *CertificateRequest) String() string { return proto.CompactTextString(m) }
func (*CertificateRequest) ProtoMessage()    {}
func (*CertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{6}
}
func (m *CertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateRequest.Unmarshal(m, b)
}
func (m *CertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateRequest.Marshal(b, m, deterministic)
}
func (dst *CertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateRequest.Merge(dst, src)
}
func (m *CertificateRequest) XXX_Size() int {
	return xxx_messageInfo_CertificateRequest.Size(m)
}
func (m *CertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateRequest proto.InternalMessageInfo

type CertificateReply struct {
	Pem                  []byte   `protobuf:"bytes,1,opt,name=pem,proto3" json:"pem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateReply) Reset()         { *m = CertificateReply{} }
func (m *CertificateReply) String() string { return proto.CompactTextString(m) }
func (*CertificateReply) ProtoMessage()    {}
func (*CertificateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{7}
}
func (m *CertificateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateReply.Unmarshal(m, b)
}
func (m *CertificateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateReply.Marshal(b, m, deterministic)
}
func (dst *CertificateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateReply.Merge(dst, src)
}
func (m *CertificateReply) XXX_Size() int {
	return xxx_messageInfo_CertificateReply.Size(m)
}
func (m *CertificateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateReply.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateReply proto.InternalMessageInfo

func (m *CertificateReply) GetPem() []byte {
	if m != nil {
		return m.Pem
	}
	return nil
}

type GetRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}
func (*GetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{8}
}
func (m *GetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRequest.Unmarshal(m, b)
}
func (m *GetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRequest.Marshal(b, m, deterministic)
}
func (dst *GetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRequest.Merge(dst, src)
}
func (m *GetRequest) XXX_Size() int {
	return xxx_messageInfo_GetRequest.Size(m)
}
func (m *GetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRequest proto.InternalMessageInfo

type GetReply struct {
	LeaseId              string   `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	OrderDefinition      string   `protobuf:"bytes,2,opt,name=order_definition,json=orderDefinition,proto3" json:"order_definition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{9}
}
func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReply.Unmarshal(m, b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
}
func (dst *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(dst, src)
}
func (m *GetReply) XXX_Size() int {
	return xxx_messageInfo_GetReply.Size(m)
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetLeaseId() string {
	if m != nil {
		return m.LeaseId
	}
	return ""
}

func (m *GetReply) GetOrderDefinition() string {
	if m != nil {
		return m.OrderDefinition
	}
	return ""
}

type RenewRequest struct {
	LeaseId              string   `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	ExtendSec            int32    `protobuf:"varint,2,opt,name=extend_sec,json=extendSec,proto3" json:"extend_sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenewRequest) Reset()         { *m = RenewRequest{} }
func (m *RenewRequest) String() string { return proto.CompactTextString(m) }
func (*RenewRequest) ProtoMessage()    {}
func (*RenewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{10}
}
func (m *RenewRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenewRequest.Unmarshal(m, b)
}
func (m *RenewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenewRequest.Marshal(b, m, deterministic)
}
func (dst *RenewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewRequest.Merge(dst, src)
}
func (m *RenewRequest) XXX_Size() int {
	return xxx_messageInfo_RenewRequest.Size(m)
}
func (m *RenewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenewRequest proto.InternalMessageInfo

func (m *RenewRequest) GetLeaseId() string {
	if m != nil {
		return m.LeaseId
	}
	return ""
}

func (m *RenewRequest) GetExtendSec() int32 {
	if m != nil {
		return m.ExtendSec
	}
	return 0
}

type RenewReply struct {
	NewTimeoutSec        int64    `protobuf:"varint,1,opt,name=new_timeout_sec,json=newTimeoutSec,proto3" json:"new_timeout_sec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenewReply) Reset()         { *m = RenewReply{} }
func (m *RenewReply) String() string { return proto.CompactTextString(m) }
func (*RenewReply) ProtoMessage()    {}
func (*RenewReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{11}
}
func (m *RenewReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RenewReply.Unmarshal(m, b)
}
func (m *RenewReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RenewReply.Marshal(b, m, deterministic)
}
func (dst *RenewReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewReply.Merge(dst, src)
}
func (m *RenewReply) XXX_Size() int {
	return xxx_messageInfo_RenewReply.Size(m)
}
func (m *RenewReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewReply.DiscardUnknown(m)
}

var xxx_messageInfo_RenewReply proto.InternalMessageInfo

func (m *RenewReply) GetNewTimeoutSec() int64 {
	if m != nil {
		return m.NewTimeoutSec
	}
	return 0
}

type DoneRequest struct {
	LeaseId              string             `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	Image                []byte             `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Stdout               []byte             `protobuf:"bytes,3,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr               []byte             `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	JsonMetadata         string             `protobuf:"bytes,5,opt,name=json_metadata,json=jsonMetadata,proto3" json:"json_metadata,omitempty"`
	Metadata             *RenderingMetadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DoneRequest) Reset()         { *m = DoneRequest{} }
func (m *DoneRequest) String() string { return proto.CompactTextString(m) }
func (*DoneRequest) ProtoMessage()    {}
func (*DoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{12}
}
func (m *DoneRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoneRequest.Unmarshal(m, b)
}
func (m *DoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoneRequest.Marshal(b, m, deterministic)
}
func (dst *DoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoneRequest.Merge(dst, src)
}
func (m *DoneRequest) XXX_Size() int {
	return xxx_messageInfo_DoneRequest.Size(m)
}
func (m *DoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DoneRequest proto.InternalMessageInfo

func (m *DoneRequest) GetLeaseId() string {
	if m != nil {
		return m.LeaseId
	}
	return ""
}

func (m *DoneRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *DoneRequest) GetStdout() []byte {
	if m != nil {
		return m.Stdout
	}
	return nil
}

func (m *DoneRequest) GetStderr() []byte {
	if m != nil {
		return m.Stderr
	}
	return nil
}

func (m *DoneRequest) GetJsonMetadata() string {
	if m != nil {
		return m.JsonMetadata
	}
	return ""
}

func (m *DoneRequest) GetMetadata() *RenderingMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type DoneReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoneReply) Reset()         { *m = DoneReply{} }
func (m *DoneReply) String() string { return proto.CompactTextString(m) }
func (*DoneReply) ProtoMessage()    {}
func (*DoneReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{13}
}
func (m *DoneReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DoneReply.Unmarshal(m, b)
}
func (m *DoneReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DoneReply.Marshal(b, m, deterministic)
}
func (dst *DoneReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoneReply.Merge(dst, src)
}
func (m *DoneReply) XXX_Size() int {
	return xxx_messageInfo_DoneReply.Size(m)
}
func (m *DoneReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DoneReply.DiscardUnknown(m)
}

var xxx_messageInfo_DoneReply proto.InternalMessageInfo

type FailedRequest struct {
	LeaseId              string   `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FailedRequest) Reset()         { *m = FailedRequest{} }
func (m *FailedRequest) String() string { return proto.CompactTextString(m) }
func (*FailedRequest) ProtoMessage()    {}
func (*FailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{14}
}
func (m *FailedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailedRequest.Unmarshal(m, b)
}
func (m *FailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailedRequest.Marshal(b, m, deterministic)
}
func (dst *FailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailedRequest.Merge(dst, src)
}
func (m *FailedRequest) XXX_Size() int {
	return xxx_messageInfo_FailedRequest.Size(m)
}
func (m *FailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FailedRequest proto.InternalMessageInfo

func (m *FailedRequest) GetLeaseId() string {
	if m != nil {
		return m.LeaseId
	}
	return ""
}

type FailedReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FailedReply) Reset()         { *m = FailedReply{} }
func (m *FailedReply) String() string { return proto.CompactTextString(m) }
func (*FailedReply) ProtoMessage()    {}
func (*FailedReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{15}
}
func (m *FailedReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FailedReply.Unmarshal(m, b)
}
func (m *FailedReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FailedReply.Marshal(b, m, deterministic)
}
func (dst *FailedReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailedReply.Merge(dst, src)
}
func (m *FailedReply) XXX_Size() int {
	return xxx_messageInfo_FailedReply.Size(m)
}
func (m *FailedReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FailedReply.DiscardUnknown(m)
}

var xxx_messageInfo_FailedReply proto.InternalMessageInfo

type AddRequest struct {
	OrderDefinition string `protobuf:"bytes,1,opt,name=order_definition,json=orderDefinition,proto3" json:"order_definition,omitempty"`
	// string destination = 2; // DEPRECATED: Directory to store the results as <file>.png and <file>.proto.
	BatchId              string   `protobuf:"bytes,3,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}
func (*AddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{16}
}
func (m *AddRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRequest.Unmarshal(m, b)
}
func (m *AddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRequest.Marshal(b, m, deterministic)
}
func (dst *AddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequest.Merge(dst, src)
}
func (m *AddRequest) XXX_Size() int {
	return xxx_messageInfo_AddRequest.Size(m)
}
func (m *AddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequest proto.InternalMessageInfo

func (m *AddRequest) GetOrderDefinition() string {
	if m != nil {
		return m.OrderDefinition
	}
	return ""
}

func (m *AddRequest) GetBatchId() string {
	if m != nil {
		return m.BatchId
	}
	return ""
}

type AddReply struct {
	OrderId              string   `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddReply) Reset()         { *m = AddReply{} }
func (m *AddReply) String() string { return proto.CompactTextString(m) }
func (*AddReply) ProtoMessage()    {}
func (*AddReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{17}
}
func (m *AddReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddReply.Unmarshal(m, b)
}
func (m *AddReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddReply.Marshal(b, m, deterministic)
}
func (dst *AddReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddReply.Merge(dst, src)
}
func (m *AddReply) XXX_Size() int {
	return xxx_messageInfo_AddReply.Size(m)
}
func (m *AddReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddReply proto.InternalMessageInfo

func (m *AddReply) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

type Lease struct {
	OrderId              string             `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	LeaseId              string             `protobuf:"bytes,2,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	Done                 bool               `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`
	UserId               int64              `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreatedMs            int64              `protobuf:"varint,5,opt,name=created_ms,json=createdMs,proto3" json:"created_ms,omitempty"`
	UpdatedMs            int64              `protobuf:"varint,6,opt,name=updated_ms,json=updatedMs,proto3" json:"updated_ms,omitempty"`
	ExpiresMs            int64              `protobuf:"varint,7,opt,name=expires_ms,json=expiresMs,proto3" json:"expires_ms,omitempty"`
	Order                *Order             `protobuf:"bytes,8,opt,name=order,proto3" json:"order,omitempty"`
	Metadata             *RenderingMetadata `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Failed               bool               `protobuf:"varint,10,opt,name=failed,proto3" json:"failed,omitempty"`
	Address              string             `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	Hostname             string             `protobuf:"bytes,12,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Lease) Reset()         { *m = Lease{} }
func (m *Lease) String() string { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()    {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{18}
}
func (m *Lease) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Lease.Unmarshal(m, b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
}
func (dst *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(dst, src)
}
func (m *Lease) XXX_Size() int {
	return xxx_messageInfo_Lease.Size(m)
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func (m *Lease) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *Lease) GetLeaseId() string {
	if m != nil {
		return m.LeaseId
	}
	return ""
}

func (m *Lease) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *Lease) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Lease) GetCreatedMs() int64 {
	if m != nil {
		return m.CreatedMs
	}
	return 0
}

func (m *Lease) GetUpdatedMs() int64 {
	if m != nil {
		return m.UpdatedMs
	}
	return 0
}

func (m *Lease) GetExpiresMs() int64 {
	if m != nil {
		return m.ExpiresMs
	}
	return 0
}

func (m *Lease) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *Lease) GetMetadata() *RenderingMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Lease) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *Lease) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Lease) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type LeaseRequest struct {
	LeaseId              string   `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaseRequest) Reset()         { *m = LeaseRequest{} }
func (m *LeaseRequest) String() string { return proto.CompactTextString(m) }
func (*LeaseRequest) ProtoMessage()    {}
func (*LeaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{19}
}
func (m *LeaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseRequest.Unmarshal(m, b)
}
func (m *LeaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseRequest.Marshal(b, m, deterministic)
}
func (dst *LeaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseRequest.Merge(dst, src)
}
func (m *LeaseRequest) XXX_Size() int {
	return xxx_messageInfo_LeaseRequest.Size(m)
}
func (m *LeaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseRequest proto.InternalMessageInfo

func (m *LeaseRequest) GetLeaseId() string {
	if m != nil {
		return m.LeaseId
	}
	return ""
}

type LeaseReply struct {
	Lease                *Lease   `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaseReply) Reset()         { *m = LeaseReply{} }
func (m *LeaseReply) String() string { return proto.CompactTextString(m) }
func (*LeaseReply) ProtoMessage()    {}
func (*LeaseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{20}
}
func (m *LeaseReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseReply.Unmarshal(m, b)
}
func (m *LeaseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseReply.Marshal(b, m, deterministic)
}
func (dst *LeaseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseReply.Merge(dst, src)
}
func (m *LeaseReply) XXX_Size() int {
	return xxx_messageInfo_LeaseReply.Size(m)
}
func (m *LeaseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseReply.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseReply proto.InternalMessageInfo

func (m *LeaseReply) GetLease() *Lease {
	if m != nil {
		return m.Lease
	}
	return nil
}

type OrderRequest struct {
	OrderId              []string `protobuf:"bytes,1,rep,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderRequest) Reset()         { *m = OrderRequest{} }
func (m *OrderRequest) String() string { return proto.CompactTextString(m) }
func (*OrderRequest) ProtoMessage()    {}
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{21}
}
func (m *OrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderRequest.Unmarshal(m, b)
}
func (m *OrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderRequest.Marshal(b, m, deterministic)
}
func (dst *OrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderRequest.Merge(dst, src)
}
func (m *OrderRequest) XXX_Size() int {
	return xxx_messageInfo_OrderRequest.Size(m)
}
func (m *OrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderRequest proto.InternalMessageInfo

func (m *OrderRequest) GetOrderId() []string {
	if m != nil {
		return m.OrderId
	}
	return nil
}

type OrderReply struct {
	Order                []*Order `protobuf:"bytes,1,rep,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderReply) Reset()         { *m = OrderReply{} }
func (m *OrderReply) String() string { return proto.CompactTextString(m) }
func (*OrderReply) ProtoMessage()    {}
func (*OrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{22}
}
func (m *OrderReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderReply.Unmarshal(m, b)
}
func (m *OrderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderReply.Marshal(b, m, deterministic)
}
func (dst *OrderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderReply.Merge(dst, src)
}
func (m *OrderReply) XXX_Size() int {
	return xxx_messageInfo_OrderReply.Size(m)
}
func (m *OrderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderReply.DiscardUnknown(m)
}

var xxx_messageInfo_OrderReply proto.InternalMessageInfo

func (m *OrderReply) GetOrder() []*Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type LeasesRequest struct {
	Done                 bool     `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	Order                bool     `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	Metadata             bool     `protobuf:"varint,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Since                int64    `protobuf:"varint,4,opt,name=since,proto3" json:"since,omitempty"`
	Batch                string   `protobuf:"bytes,5,opt,name=batch,proto3" json:"batch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeasesRequest) Reset()         { *m = LeasesRequest{} }
func (m *LeasesRequest) String() string { return proto.CompactTextString(m) }
func (*LeasesRequest) ProtoMessage()    {}
func (*LeasesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{23}
}
func (m *LeasesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeasesRequest.Unmarshal(m, b)
}
func (m *LeasesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeasesRequest.Marshal(b, m, deterministic)
}
func (dst *LeasesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeasesRequest.Merge(dst, src)
}
func (m *LeasesRequest) XXX_Size() int {
	return xxx_messageInfo_LeasesRequest.Size(m)
}
func (m *LeasesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeasesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeasesRequest proto.InternalMessageInfo

func (m *LeasesRequest) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *LeasesRequest) GetOrder() bool {
	if m != nil {
		return m.Order
	}
	return false
}

func (m *LeasesRequest) GetMetadata() bool {
	if m != nil {
		return m.Metadata
	}
	return false
}

func (m *LeasesRequest) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *LeasesRequest) GetBatch() string {
	if m != nil {
		return m.Batch
	}
	return ""
}

type LeasesReply struct {
	Lease                *Lease   `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeasesReply) Reset()         { *m = LeasesReply{} }
func (m *LeasesReply) String() string { return proto.CompactTextString(m) }
func (*LeasesReply) ProtoMessage()    {}
func (*LeasesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{24}
}
func (m *LeasesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeasesReply.Unmarshal(m, b)
}
func (m *LeasesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeasesReply.Marshal(b, m, deterministic)
}
func (dst *LeasesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeasesReply.Merge(dst, src)
}
func (m *LeasesReply) XXX_Size() int {
	return xxx_messageInfo_LeasesReply.Size(m)
}
func (m *LeasesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LeasesReply.DiscardUnknown(m)
}

var xxx_messageInfo_LeasesReply proto.InternalMessageInfo

func (m *LeasesReply) GetLease() *Lease {
	if m != nil {
		return m.Lease
	}
	return nil
}

type OrdersRequest struct {
	Done                 bool     `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	Active               bool     `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	Unstarted            bool     `protobuf:"varint,3,opt,name=unstarted,proto3" json:"unstarted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrdersRequest) Reset()         { *m = OrdersRequest{} }
func (m *OrdersRequest) String() string { return proto.CompactTextString(m) }
func (*OrdersRequest) ProtoMessage()    {}
func (*OrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{25}
}
func (m *OrdersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersRequest.Unmarshal(m, b)
}
func (m *OrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersRequest.Marshal(b, m, deterministic)
}
func (dst *OrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersRequest.Merge(dst, src)
}
func (m *OrdersRequest) XXX_Size() int {
	return xxx_messageInfo_OrdersRequest.Size(m)
}
func (m *OrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersRequest proto.InternalMessageInfo

func (m *OrdersRequest) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *OrdersRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *OrdersRequest) GetUnstarted() bool {
	if m != nil {
		return m.Unstarted
	}
	return false
}

type OrderStat struct {
	OrderId              string   `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Done                 bool     `protobuf:"varint,2,opt,name=done,proto3" json:"done,omitempty"`
	Active               bool     `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	BatchId              string   `protobuf:"bytes,4,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderStat) Reset()         { *m = OrderStat{} }
func (m *OrderStat) String() string { return proto.CompactTextString(m) }
func (*OrderStat) ProtoMessage()    {}
func (*OrderStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{26}
}
func (m *OrderStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderStat.Unmarshal(m, b)
}
func (m *OrderStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderStat.Marshal(b, m, deterministic)
}
func (dst *OrderStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderStat.Merge(dst, src)
}
func (m *OrderStat) XXX_Size() int {
	return xxx_messageInfo_OrderStat.Size(m)
}
func (m *OrderStat) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderStat.DiscardUnknown(m)
}

var xxx_messageInfo_OrderStat proto.InternalMessageInfo

func (m *OrderStat) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *OrderStat) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func (m *OrderStat) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *OrderStat) GetBatchId() string {
	if m != nil {
		return m.BatchId
	}
	return ""
}

type OrdersReply struct {
	Order                *OrderStat `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *OrdersReply) Reset()         { *m = OrdersReply{} }
func (m *OrdersReply) String() string { return proto.CompactTextString(m) }
func (*OrdersReply) ProtoMessage()    {}
func (*OrdersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{27}
}
func (m *OrdersReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrdersReply.Unmarshal(m, b)
}
func (m *OrdersReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrdersReply.Marshal(b, m, deterministic)
}
func (dst *OrdersReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersReply.Merge(dst, src)
}
func (m *OrdersReply) XXX_Size() int {
	return xxx_messageInfo_OrdersReply.Size(m)
}
func (m *OrdersReply) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersReply.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersReply proto.InternalMessageInfo

func (m *OrdersReply) GetOrder() *OrderStat {
	if m != nil {
		return m.Order
	}
	return nil
}

type SchedulingStats struct {
	Orders               int64    `protobuf:"varint,1,opt,name=orders,proto3" json:"orders,omitempty"`
	ActiveOrders         int64    `protobuf:"varint,2,opt,name=active_orders,json=activeOrders,proto3" json:"active_orders,omitempty"`
	DoneOrders           int64    `protobuf:"varint,3,opt,name=done_orders,json=doneOrders,proto3" json:"done_orders,omitempty"`
	Leases               int64    `protobuf:"varint,4,opt,name=leases,proto3" json:"leases,omitempty"`
	ActiveLeases         int64    `protobuf:"varint,5,opt,name=active_leases,json=activeLeases,proto3" json:"active_leases,omitempty"`
	DoneLeases           int64    `protobuf:"varint,6,opt,name=done_leases,json=doneLeases,proto3" json:"done_leases,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchedulingStats) Reset()         { *m = SchedulingStats{} }
func (m *SchedulingStats) String() string { return proto.CompactTextString(m) }
func (*SchedulingStats) ProtoMessage()    {}
func (*SchedulingStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{28}
}
func (m *SchedulingStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchedulingStats.Unmarshal(m, b)
}
func (m *SchedulingStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchedulingStats.Marshal(b, m, deterministic)
}
func (dst *SchedulingStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchedulingStats.Merge(dst, src)
}
func (m *SchedulingStats) XXX_Size() int {
	return xxx_messageInfo_SchedulingStats.Size(m)
}
func (m *SchedulingStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SchedulingStats.DiscardUnknown(m)
}

var xxx_messageInfo_SchedulingStats proto.InternalMessageInfo

func (m *SchedulingStats) GetOrders() int64 {
	if m != nil {
		return m.Orders
	}
	return 0
}

func (m *SchedulingStats) GetActiveOrders() int64 {
	if m != nil {
		return m.ActiveOrders
	}
	return 0
}

func (m *SchedulingStats) GetDoneOrders() int64 {
	if m != nil {
		return m.DoneOrders
	}
	return 0
}

func (m *SchedulingStats) GetLeases() int64 {
	if m != nil {
		return m.Leases
	}
	return 0
}

func (m *SchedulingStats) GetActiveLeases() int64 {
	if m != nil {
		return m.ActiveLeases
	}
	return 0
}

func (m *SchedulingStats) GetDoneLeases() int64 {
	if m != nil {
		return m.DoneLeases
	}
	return 0
}

type StatsRequest struct {
	SchedulingStats      bool     `protobuf:"varint,1,opt,name=scheduling_stats,json=schedulingStats,proto3" json:"scheduling_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsRequest) Reset()         { *m = StatsRequest{} }
func (m *StatsRequest) String() string { return proto.CompactTextString(m) }
func (*StatsRequest) ProtoMessage()    {}
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{29}
}
func (m *StatsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsRequest.Unmarshal(m, b)
}
func (m *StatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsRequest.Marshal(b, m, deterministic)
}
func (dst *StatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsRequest.Merge(dst, src)
}
func (m *StatsRequest) XXX_Size() int {
	return xxx_messageInfo_StatsRequest.Size(m)
}
func (m *StatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatsRequest proto.InternalMessageInfo

func (m *StatsRequest) GetSchedulingStats() bool {
	if m != nil {
		return m.SchedulingStats
	}
	return false
}

// Global stats.
type StatsReply struct {
	SchedulingStats      *SchedulingStats `protobuf:"bytes,1,opt,name=scheduling_stats,json=schedulingStats,proto3" json:"scheduling_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StatsReply) Reset()         { *m = StatsReply{} }
func (m *StatsReply) String() string { return proto.CompactTextString(m) }
func (*StatsReply) ProtoMessage()    {}
func (*StatsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{30}
}
func (m *StatsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsReply.Unmarshal(m, b)
}
func (m *StatsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsReply.Marshal(b, m, deterministic)
}
func (dst *StatsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsReply.Merge(dst, src)
}
func (m *StatsReply) XXX_Size() int {
	return xxx_messageInfo_StatsReply.Size(m)
}
func (m *StatsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsReply.DiscardUnknown(m)
}

var xxx_messageInfo_StatsReply proto.InternalMessageInfo

func (m *StatsReply) GetSchedulingStats() *SchedulingStats {
	if m != nil {
		return m.SchedulingStats
	}
	return nil
}

type ResultRequest struct {
	LeaseId              string   `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	Data                 bool     `protobuf:"varint,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultRequest) Reset()         { *m = ResultRequest{} }
func (m *ResultRequest) String() string { return proto.CompactTextString(m) }
func (*ResultRequest) ProtoMessage()    {}
func (*ResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{31}
}
func (m *ResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultRequest.Unmarshal(m, b)
}
func (m *ResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultRequest.Marshal(b, m, deterministic)
}
func (dst *ResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultRequest.Merge(dst, src)
}
func (m *ResultRequest) XXX_Size() int {
	return xxx_messageInfo_ResultRequest.Size(m)
}
func (m *ResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResultRequest proto.InternalMessageInfo

func (m *ResultRequest) GetLeaseId() string {
	if m != nil {
		return m.LeaseId
	}
	return ""
}

func (m *ResultRequest) GetData() bool {
	if m != nil {
		return m.Data
	}
	return false
}

type ResultReply struct {
	ContentType          string   `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultReply) Reset()         { *m = ResultReply{} }
func (m *ResultReply) String() string { return proto.CompactTextString(m) }
func (*ResultReply) ProtoMessage()    {}
func (*ResultReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduler_599a49ee67bf690a, []int{32}
}
func (m *ResultReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultReply.Unmarshal(m, b)
}
func (m *ResultReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultReply.Marshal(b, m, deterministic)
}
func (dst *ResultReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultReply.Merge(dst, src)
}
func (m *ResultReply) XXX_Size() int {
	return xxx_messageInfo_ResultReply.Size(m)
}
func (m *ResultReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultReply.DiscardUnknown(m)
}

var xxx_messageInfo_ResultReply proto.InternalMessageInfo

func (m *ResultReply) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *ResultReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "qpov.LoginRequest")
	proto.RegisterType((*LoginReply)(nil), "qpov.LoginReply")
	proto.RegisterType((*LogoutRequest)(nil), "qpov.LogoutRequest")
	proto.RegisterType((*LogoutReply)(nil), "qpov.LogoutReply")
	proto.RegisterType((*CheckCookieRequest)(nil), "qpov.CheckCookieRequest")
	proto.RegisterType((*CheckCookieReply)(nil), "qpov.CheckCookieReply")
	proto.RegisterType((*CertificateRequest)(nil), "qpov.CertificateRequest")
	proto.RegisterType((*CertificateReply)(nil), "qpov.CertificateReply")
	proto.RegisterType((*GetRequest)(nil), "qpov.GetRequest")
	proto.RegisterType((*GetReply)(nil), "qpov.GetReply")
	proto.RegisterType((*RenewRequest)(nil), "qpov.RenewRequest")
	proto.RegisterType((*RenewReply)(nil), "qpov.RenewReply")
	proto.RegisterType((*DoneRequest)(nil), "qpov.DoneRequest")
	proto.RegisterType((*DoneReply)(nil), "qpov.DoneReply")
	proto.RegisterType((*FailedRequest)(nil), "qpov.FailedRequest")
	proto.RegisterType((*FailedReply)(nil), "qpov.FailedReply")
	proto.RegisterType((*AddRequest)(nil), "qpov.AddRequest")
	proto.RegisterType((*AddReply)(nil), "qpov.AddReply")
	proto.RegisterType((*Lease)(nil), "qpov.Lease")
	proto.RegisterType((*LeaseRequest)(nil), "qpov.LeaseRequest")
	proto.RegisterType((*LeaseReply)(nil), "qpov.LeaseReply")
	proto.RegisterType((*OrderRequest)(nil), "qpov.OrderRequest")
	proto.RegisterType((*OrderReply)(nil), "qpov.OrderReply")
	proto.RegisterType((*LeasesRequest)(nil), "qpov.LeasesRequest")
	proto.RegisterType((*LeasesReply)(nil), "qpov.LeasesReply")
	proto.RegisterType((*OrdersRequest)(nil), "qpov.OrdersRequest")
	proto.RegisterType((*OrderStat)(nil), "qpov.OrderStat")
	proto.RegisterType((*OrdersReply)(nil), "qpov.OrdersReply")
	proto.RegisterType((*SchedulingStats)(nil), "qpov.SchedulingStats")
	proto.RegisterType((*StatsRequest)(nil), "qpov.StatsRequest")
	proto.RegisterType((*StatsReply)(nil), "qpov.StatsReply")
	proto.RegisterType((*ResultRequest)(nil), "qpov.ResultRequest")
	proto.RegisterType((*ResultReply)(nil), "qpov.ResultReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CookieMonsterClient is the client API for CookieMonster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CookieMonsterClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error)
	CheckCookie(ctx context.Context, in *CheckCookieRequest, opts ...grpc.CallOption) (*CheckCookieReply, error)
}

type cookieMonsterClient struct {
	cc *grpc.ClientConn
}

func NewCookieMonsterClient(cc *grpc.ClientConn) CookieMonsterClient {
	return &cookieMonsterClient{cc}
}

func (c *cookieMonsterClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/qpov.CookieMonster/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookieMonsterClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/qpov.CookieMonster/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookieMonsterClient) CheckCookie(ctx context.Context, in *CheckCookieRequest, opts ...grpc.CallOption) (*CheckCookieReply, error) {
	out := new(CheckCookieReply)
	err := c.cc.Invoke(ctx, "/qpov.CookieMonster/CheckCookie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CookieMonsterServer is the server API for CookieMonster service.
type CookieMonsterServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	CheckCookie(context.Context, *CheckCookieRequest) (*CheckCookieReply, error)
}

func RegisterCookieMonsterServer(s *grpc.Server, srv CookieMonsterServer) {
	s.RegisterService(&_CookieMonster_serviceDesc, srv)
}

func _CookieMonster_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieMonsterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.CookieMonster/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieMonsterServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CookieMonster_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieMonsterServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.CookieMonster/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieMonsterServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CookieMonster_CheckCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCookieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieMonsterServer).CheckCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.CookieMonster/CheckCookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieMonsterServer).CheckCookie(ctx, req.(*CheckCookieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CookieMonster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qpov.CookieMonster",
	HandlerType: (*CookieMonsterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _CookieMonster_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _CookieMonster_Logout_Handler,
		},
		{
			MethodName: "CheckCookie",
			Handler:    _CookieMonster_CheckCookie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler.proto",
}

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	// Render client API.
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
	Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewReply, error)
	Done(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneReply, error)
	Failed(ctx context.Context, in *FailedRequest, opts ...grpc.CallOption) (*FailedReply, error)
	// Order handling API. Restricted.
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	// Stats API. Restricted.
	Lease(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*LeaseReply, error)
	Leases(ctx context.Context, in *LeasesRequest, opts ...grpc.CallOption) (Scheduler_LeasesClient, error)
	Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderReply, error)
	Orders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (Scheduler_OrdersClient, error)
	// Stats API, unrestricted.
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error)
	// WebUI magic.
	// rpc UserStats (UserStatsRequest) returns (UserStatsReply) {}
	Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (Scheduler_ResultClient, error)
	Certificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateReply, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/qpov.Scheduler/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewReply, error) {
	out := new(RenewReply)
	err := c.cc.Invoke(ctx, "/qpov.Scheduler/Renew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Done(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneReply, error) {
	out := new(DoneReply)
	err := c.cc.Invoke(ctx, "/qpov.Scheduler/Done", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Failed(ctx context.Context, in *FailedRequest, opts ...grpc.CallOption) (*FailedReply, error) {
	out := new(FailedReply)
	err := c.cc.Invoke(ctx, "/qpov.Scheduler/Failed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := c.cc.Invoke(ctx, "/qpov.Scheduler/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Lease(ctx context.Context, in *LeaseRequest, opts ...grpc.CallOption) (*LeaseReply, error) {
	out := new(LeaseReply)
	err := c.cc.Invoke(ctx, "/qpov.Scheduler/Lease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Leases(ctx context.Context, in *LeasesRequest, opts ...grpc.CallOption) (Scheduler_LeasesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scheduler_serviceDesc.Streams[0], "/qpov.Scheduler/Leases", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerLeasesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_LeasesClient interface {
	Recv() (*LeasesReply, error)
	grpc.ClientStream
}

type schedulerLeasesClient struct {
	grpc.ClientStream
}

func (x *schedulerLeasesClient) Recv() (*LeasesReply, error) {
	m := new(LeasesReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) Order(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderReply, error) {
	out := new(OrderReply)
	err := c.cc.Invoke(ctx, "/qpov.Scheduler/Order", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Orders(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (Scheduler_OrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scheduler_serviceDesc.Streams[1], "/qpov.Scheduler/Orders", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_OrdersClient interface {
	Recv() (*OrdersReply, error)
	grpc.ClientStream
}

type schedulerOrdersClient struct {
	grpc.ClientStream
}

func (x *schedulerOrdersClient) Recv() (*OrdersReply, error) {
	m := new(OrdersReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := c.cc.Invoke(ctx, "/qpov.Scheduler/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) Result(ctx context.Context, in *ResultRequest, opts ...grpc.CallOption) (Scheduler_ResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Scheduler_serviceDesc.Streams[2], "/qpov.Scheduler/Result", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_ResultClient interface {
	Recv() (*ResultReply, error)
	grpc.ClientStream
}

type schedulerResultClient struct {
	grpc.ClientStream
}

func (x *schedulerResultClient) Recv() (*ResultReply, error) {
	m := new(ResultReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) Certificate(ctx context.Context, in *CertificateRequest, opts ...grpc.CallOption) (*CertificateReply, error) {
	out := new(CertificateReply)
	err := c.cc.Invoke(ctx, "/qpov.Scheduler/Certificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	// Render client API.
	Get(context.Context, *GetRequest) (*GetReply, error)
	Renew(context.Context, *RenewRequest) (*RenewReply, error)
	Done(context.Context, *DoneRequest) (*DoneReply, error)
	Failed(context.Context, *FailedRequest) (*FailedReply, error)
	// Order handling API. Restricted.
	Add(context.Context, *AddRequest) (*AddReply, error)
	// Stats API. Restricted.
	Lease(context.Context, *LeaseRequest) (*LeaseReply, error)
	Leases(*LeasesRequest, Scheduler_LeasesServer) error
	Order(context.Context, *OrderRequest) (*OrderReply, error)
	Orders(*OrdersRequest, Scheduler_OrdersServer) error
	// Stats API, unrestricted.
	Stats(context.Context, *StatsRequest) (*StatsReply, error)
	// WebUI magic.
	// rpc UserStats (UserStatsRequest) returns (UserStatsReply) {}
	Result(*ResultRequest, Scheduler_ResultServer) error
	Certificate(context.Context, *CertificateRequest) (*CertificateReply, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Renew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Renew(ctx, req.(*RenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Done(ctx, req.(*DoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Failed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Failed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Failed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Failed(ctx, req.(*FailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Lease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Lease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Lease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Lease(ctx, req.(*LeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Leases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LeasesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).Leases(m, &schedulerLeasesServer{stream})
}

type Scheduler_LeasesServer interface {
	Send(*LeasesReply) error
	grpc.ServerStream
}

type schedulerLeasesServer struct {
	grpc.ServerStream
}

func (x *schedulerLeasesServer) Send(m *LeasesReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_Order_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Order(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Order",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Order(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Orders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrdersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).Orders(m, &schedulerOrdersServer{stream})
}

type Scheduler_OrdersServer interface {
	Send(*OrdersReply) error
	grpc.ServerStream
}

type schedulerOrdersServer struct {
	grpc.ServerStream
}

func (x *schedulerOrdersServer) Send(m *OrdersReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_Result_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResultRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).Result(m, &schedulerResultServer{stream})
}

type Scheduler_ResultServer interface {
	Send(*ResultReply) error
	grpc.ServerStream
}

type schedulerResultServer struct {
	grpc.ServerStream
}

func (x *schedulerResultServer) Send(m *ResultReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_Certificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Certificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qpov.Scheduler/Certificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Certificate(ctx, req.(*CertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qpov.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Scheduler_Get_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _Scheduler_Renew_Handler,
		},
		{
			MethodName: "Done",
			Handler:    _Scheduler_Done_Handler,
		},
		{
			MethodName: "Failed",
			Handler:    _Scheduler_Failed_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Scheduler_Add_Handler,
		},
		{
			MethodName: "Lease",
			Handler:    _Scheduler_Lease_Handler,
		},
		{
			MethodName: "Order",
			Handler:    _Scheduler_Order_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Scheduler_Stats_Handler,
		},
		{
			MethodName: "Certificate",
			Handler:    _Scheduler_Certificate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Leases",
			Handler:       _Scheduler_Leases_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Orders",
			Handler:       _Scheduler_Orders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Result",
			Handler:       _Scheduler_Result_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "scheduler.proto",
}

func init() { proto.RegisterFile("scheduler.proto", fileDescriptor_scheduler_599a49ee67bf690a) }

var fileDescriptor_scheduler_599a49ee67bf690a = []byte{
	// 1188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0xd7, 0xb7, 0xa5, 0x21, 0x15, 0xe9, 0xbf, 0xf6, 0xdf, 0x61, 0x85, 0x16, 0x4d, 0xb6, 0x49,
	0x1b, 0x17, 0x81, 0x1d, 0x38, 0x3e, 0xb4, 0x97, 0xa2, 0x86, 0x8d, 0xa6, 0x06, 0xec, 0xb6, 0xa0,
	0x73, 0xe9, 0x49, 0x60, 0xc8, 0xb5, 0xcd, 0x44, 0x22, 0x15, 0xee, 0x2a, 0x8e, 0x8f, 0x7d, 0xaa,
	0xbe, 0x42, 0x2f, 0x7d, 0x93, 0xf6, 0x1d, 0x8a, 0xd9, 0xd9, 0x25, 0x97, 0xb6, 0x63, 0xeb, 0xa6,
	0xf9, 0xcd, 0xec, 0xfc, 0xe6, 0x6b, 0xb9, 0x23, 0x18, 0xc9, 0xf8, 0x42, 0x24, 0xcb, 0x99, 0x28,
	0xb6, 0x17, 0x45, 0xae, 0x72, 0xd6, 0x79, 0xbf, 0xc8, 0x3f, 0x4c, 0xbc, 0xbc, 0x48, 0x2c, 0x34,
	0x79, 0x30, 0x17, 0x2a, 0x4a, 0x22, 0x15, 0x91, 0xcc, 0xbf, 0x03, 0xff, 0x38, 0x3f, 0x4f, 0xb3,
	0x50, 0xbc, 0x5f, 0x0a, 0xa9, 0xd8, 0x26, 0xf4, 0xe2, 0x3c, 0x7f, 0x97, 0x8a, 0xa0, 0xf9, 0xa8,
	0xf9, 0x6c, 0x10, 0x1a, 0x89, 0x8d, 0xa1, 0xfd, 0xf6, 0x52, 0x05, 0x2d, 0x0d, 0xe2, 0x4f, 0xfe,
	0x04, 0xc0, 0x9c, 0x5c, 0xcc, 0xae, 0x3e, 0x75, 0x8e, 0x7f, 0x03, 0xc3, 0xe3, 0xfc, 0x3c, 0x5f,
	0xaa, 0x7b, 0x08, 0xf8, 0x10, 0x3c, 0x6b, 0xb8, 0x98, 0x5d, 0xf1, 0xe7, 0xc0, 0x0e, 0x2e, 0x44,
	0xfc, 0xee, 0x40, 0x6b, 0xef, 0x3b, 0xcc, 0x60, 0x5c, 0xb3, 0x46, 0x0f, 0x1b, 0xc0, 0x0e, 0x44,
	0xa1, 0xd2, 0xb3, 0x34, 0x8e, 0x94, 0xf5, 0xc0, 0x9f, 0xc0, 0xb8, 0x86, 0x62, 0xec, 0x63, 0x68,
	0x2f, 0xc4, 0x5c, 0xbb, 0xf4, 0x43, 0xfc, 0xc9, 0x7d, 0x80, 0x57, 0xc2, 0x86, 0xcc, 0x7f, 0x83,
	0xbe, 0x96, 0xd0, 0xf6, 0x33, 0xe8, 0xcf, 0x44, 0x24, 0xc5, 0x34, 0x4d, 0x4c, 0x0c, 0x6b, 0x5a,
	0x3e, 0x4a, 0xd8, 0x16, 0x8c, 0x75, 0xa5, 0xa7, 0x89, 0x38, 0x4b, 0xb3, 0x54, 0xa5, 0x79, 0x66,
	0xea, 0x35, 0xd2, 0xf8, 0x61, 0x09, 0xf3, 0x9f, 0xc1, 0x0f, 0x45, 0x26, 0x2e, 0x6d, 0x5e, 0x77,
	0x78, 0xfd, 0x02, 0x40, 0x7c, 0x54, 0x22, 0x4b, 0xa6, 0x52, 0xc4, 0xda, 0x5f, 0x37, 0x1c, 0x10,
	0x72, 0x2a, 0x62, 0xbe, 0x07, 0x60, 0x3c, 0x61, 0x74, 0x5f, 0xc3, 0x28, 0x13, 0x97, 0x53, 0x95,
	0xce, 0x45, 0xbe, 0x54, 0xfa, 0x04, 0xba, 0x6b, 0x87, 0xc3, 0x4c, 0x5c, 0xbe, 0x26, 0x14, 0x4f,
	0xfd, 0xd5, 0x04, 0xef, 0x30, 0xcf, 0xc4, 0x0a, 0xfc, 0x1b, 0xd0, 0x4d, 0xe7, 0xd1, 0xb9, 0xd0,
	0xd4, 0x7e, 0x48, 0x02, 0x36, 0x42, 0xaa, 0x24, 0x5f, 0xaa, 0xa0, 0xad, 0x61, 0x23, 0x19, 0x5c,
	0x14, 0x45, 0xd0, 0x29, 0x71, 0x51, 0x14, 0xec, 0x2b, 0x18, 0xbe, 0x95, 0x79, 0x36, 0xb5, 0xd3,
	0x17, 0x74, 0x35, 0x8b, 0x8f, 0xe0, 0x89, 0xc1, 0xd8, 0x4b, 0xe8, 0x97, 0xfa, 0xde, 0xa3, 0xe6,
	0x33, 0x6f, 0xf7, 0xe1, 0x36, 0x4e, 0xf0, 0x76, 0x28, 0xb2, 0x44, 0x14, 0x69, 0x76, 0x6e, 0x4d,
	0xc3, 0xd2, 0x90, 0x7b, 0x30, 0xa0, 0x4c, 0xb0, 0xe7, 0xdf, 0xc2, 0xf0, 0xa7, 0x28, 0x9d, 0x89,
	0xe4, 0xfe, 0xc4, 0x70, 0xe0, 0xac, 0x2d, 0x1e, 0x0d, 0x01, 0xf6, 0x93, 0xf2, 0xdc, 0x6d, 0xbd,
	0x6c, 0xde, 0xda, 0x4b, 0xa4, 0x78, 0x13, 0xa9, 0xf8, 0x02, 0x29, 0xda, 0x44, 0xa1, 0xe5, 0xa3,
	0x84, 0x3f, 0x85, 0xbe, 0xf6, 0x69, 0x06, 0x87, 0x3c, 0x56, 0x91, 0x68, 0xf9, 0x28, 0xe1, 0xff,
	0xb6, 0xa0, 0x7b, 0x8c, 0x51, 0xdd, 0x61, 0x54, 0xcb, 0xa4, 0x55, 0x6f, 0x11, 0x83, 0x4e, 0x92,
	0x67, 0x42, 0xb3, 0xf7, 0x43, 0xfd, 0x9b, 0x3d, 0x84, 0xb5, 0xa5, 0x24, 0x47, 0x1d, 0x3d, 0x01,
	0x3d, 0x14, 0x69, 0x9e, 0xe2, 0x42, 0x44, 0x4a, 0x24, 0xd3, 0xb9, 0xd4, 0x6d, 0x68, 0x87, 0x03,
	0x83, 0x9c, 0x48, 0x54, 0x2f, 0x17, 0x89, 0x55, 0xf7, 0x48, 0x6d, 0x10, 0x52, 0x8b, 0x8f, 0x8b,
	0xb4, 0x10, 0x12, 0xd5, 0x6b, 0xa4, 0x36, 0xc8, 0x89, 0x64, 0x8f, 0xa1, 0xab, 0xe3, 0x0d, 0xfa,
	0xba, 0x7d, 0x1e, 0xb5, 0xef, 0x57, 0x84, 0x42, 0xd2, 0xd4, 0x9a, 0x3c, 0x58, 0xb1, 0xc9, 0x38,
	0x56, 0x67, 0xba, 0x57, 0x01, 0xe8, 0x1c, 0x8d, 0xc4, 0x02, 0x58, 0x8b, 0x92, 0xa4, 0x10, 0x52,
	0x06, 0x1e, 0xd5, 0xc4, 0x88, 0x6c, 0x02, 0xfd, 0x8b, 0x5c, 0xaa, 0x2c, 0x9a, 0x8b, 0xc0, 0xd7,
	0xaa, 0x52, 0xe6, 0x5b, 0xe0, 0xeb, 0x72, 0xaf, 0x30, 0x24, 0x3b, 0x00, 0xc6, 0x14, 0x7b, 0xf8,
	0x18, 0xba, 0x5a, 0xa1, 0xad, 0xca, 0xf4, 0xc8, 0x80, 0x34, 0xe8, 0x9b, 0xd2, 0xad, 0x7c, 0x3b,
	0x1d, 0x6d, 0xbb, 0x6d, 0xdf, 0x01, 0x30, 0xa6, 0xc6, 0x37, 0x95, 0x0e, 0xad, 0x6e, 0x2d, 0x1d,
	0xff, 0xa3, 0x09, 0x43, 0x4d, 0x26, 0xad, 0x77, 0xdb, 0xf9, 0xa6, 0xd3, 0xf9, 0x0d, 0xeb, 0xa8,
	0xa5, 0x41, 0x53, 0xf6, 0x89, 0x53, 0x76, 0x9a, 0x93, 0xaa, 0xba, 0x1b, 0xd0, 0x95, 0x69, 0x16,
	0x0b, 0x33, 0x29, 0x24, 0x20, 0xaa, 0xe7, 0xd8, 0x5c, 0x55, 0x12, 0xf8, 0x0b, 0xf0, 0x6c, 0x08,
	0x2b, 0x56, 0xe4, 0x77, 0x18, 0xea, 0x2c, 0xee, 0x0c, 0x7a, 0x13, 0x7a, 0x51, 0xac, 0xd2, 0x0f,
	0xc2, 0x44, 0x6d, 0x24, 0xf6, 0x39, 0x0c, 0x96, 0x99, 0x54, 0x51, 0xa1, 0x44, 0x62, 0xe2, 0xae,
	0x00, 0x3e, 0x87, 0x81, 0x76, 0x7d, 0xaa, 0x22, 0x75, 0xd7, 0xdd, 0xb1, 0x8c, 0xad, 0x5b, 0x19,
	0xdb, 0x35, 0x46, 0xf7, 0x3a, 0x77, 0xea, 0xd7, 0x79, 0x0f, 0x3c, 0x9b, 0x09, 0xe6, 0xfe, 0xb4,
	0xea, 0x18, 0xe6, 0x3e, 0x72, 0x3a, 0x86, 0x01, 0xd9, 0xae, 0xfd, 0xdd, 0x84, 0xd1, 0x29, 0x3d,
	0xcc, 0x69, 0x76, 0x8e, 0x1a, 0x89, 0xe4, 0x5a, 0x29, 0xcd, 0xe7, 0xd9, 0x48, 0xf8, 0x99, 0xa4,
	0x30, 0xa6, 0x46, 0xdd, 0xd2, 0x6a, 0x9f, 0x40, 0x22, 0x67, 0x5f, 0x82, 0x87, 0x19, 0x58, 0x93,
	0xb6, 0x36, 0x01, 0x84, 0x8c, 0xc1, 0x26, 0xf4, 0x74, 0xe9, 0xa5, 0xbd, 0xfa, 0x24, 0x39, 0xde,
	0x8d, 0xba, 0xeb, 0x7a, 0xa7, 0xb6, 0x96, 0xde, 0x8d, 0x49, 0xaf, 0xf2, 0x4e, 0x06, 0xfc, 0x7b,
	0xf0, 0x75, 0x12, 0xce, 0xa7, 0x52, 0x96, 0xe9, 0x4d, 0x25, 0xaa, 0x4c, 0x6b, 0x47, 0xb2, 0x9e,
	0x36, 0xff, 0x05, 0xc0, 0x1c, 0xc5, 0xfa, 0xfd, 0xf8, 0x89, 0x83, 0xde, 0xee, 0xff, 0xa9, 0x94,
	0xd7, 0xaa, 0x76, 0xd3, 0xdf, 0x0f, 0x30, 0x0c, 0x85, 0x5c, 0xce, 0xd4, 0x0a, 0xef, 0x18, 0xce,
	0x00, 0x0e, 0xbf, 0x9d, 0x01, 0x7c, 0x3b, 0x0e, 0xc1, 0xb3, 0xe7, 0x69, 0x98, 0xfd, 0x38, 0xcf,
	0x94, 0xc8, 0xd4, 0x54, 0x5d, 0x2d, 0xec, 0x8e, 0xe1, 0x19, 0xec, 0xf5, 0xd5, 0x42, 0xd4, 0xbc,
	0xf8, 0xe4, 0x65, 0xf7, 0xcf, 0x26, 0x0c, 0x69, 0xf1, 0x38, 0xc9, 0x33, 0xa9, 0x44, 0xc1, 0x76,
	0xa0, 0xab, 0x57, 0x23, 0xc6, 0xcc, 0x7d, 0x70, 0x36, 0xac, 0xc9, 0xb8, 0x86, 0xe1, 0xd3, 0xd3,
	0x60, 0xbb, 0xd0, 0xa3, 0xe5, 0x87, 0xad, 0x97, 0xda, 0x6a, 0x67, 0x9a, 0xfc, 0xaf, 0x0e, 0xd2,
	0x99, 0x7d, 0xf0, 0x9c, 0x9d, 0x87, 0x05, 0x64, 0x73, 0x73, 0x69, 0x9a, 0x6c, 0xde, 0xa2, 0xd1,
	0x2e, 0x76, 0xff, 0xe9, 0xc0, 0xe0, 0xd4, 0xee, 0x8c, 0x6c, 0x0b, 0xda, 0xaf, 0x84, 0x62, 0x26,
	0xbe, 0x6a, 0xff, 0x99, 0x3c, 0x70, 0x10, 0xe2, 0xde, 0x81, 0xae, 0xde, 0x3a, 0x6c, 0x82, 0xee,
	0x32, 0x63, 0x13, 0xac, 0xd6, 0x12, 0xde, 0x60, 0xcf, 0xa1, 0x83, 0xaf, 0x34, 0x33, 0x99, 0x38,
	0xbb, 0xc7, 0x64, 0xe4, 0x42, 0x65, 0x39, 0xe8, 0x69, 0xb6, 0xe5, 0xa8, 0x3d, 0xea, 0xb6, 0x1c,
	0xee, 0xeb, 0xdd, 0xc0, 0xe8, 0xf7, 0x93, 0xc4, 0x46, 0x5f, 0x3d, 0xe5, 0x36, 0x7a, 0xfb, 0x10,
	0x53, 0xf4, 0xf4, 0xdc, 0x32, 0xf7, 0x73, 0x75, 0xad, 0x3d, 0xe5, 0x57, 0x9f, 0x37, 0xd8, 0x1e,
	0xf4, 0xcc, 0xed, 0x58, 0x77, 0xb4, 0xf2, 0x7a, 0x7b, 0xaa, 0xef, 0x22, 0x6f, 0xbc, 0x68, 0x22,
	0x8d, 0xbe, 0x90, 0x96, 0xc6, 0x7d, 0x17, 0x2c, 0x4d, 0xf5, 0x00, 0x10, 0x8d, 0xb9, 0xc1, 0xeb,
	0x8e, 0xf6, 0x3a, 0x8d, 0xf3, 0x09, 0xb2, 0x34, 0xf4, 0x51, 0x31, 0x34, 0xee, 0xe5, 0xb4, 0x34,
	0xd5, 0xad, 0x23, 0x1a, 0x9a, 0x7a, 0x4b, 0x53, 0xbb, 0x43, 0x96, 0xc6, 0xb9, 0x18, 0x9a, 0x06,
	0xc7, 0xad, 0x5a, 0x9c, 0xcb, 0x71, 0xbb, 0xb1, 0x61, 0x97, 0xe3, 0x76, 0x6d, 0xcb, 0xe6, 0x8d,
	0x37, 0x3d, 0xfd, 0x97, 0xe3, 0xe5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x35, 0x55, 0x94, 0xa5,
	0xa8, 0x0c, 0x00, 0x00,
}
